/* 
# Copyright 2011 E.J.I.E., S.A.
#
# Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
# Solo podrá usarse esta obra si se respeta la Licencia.
# Puede obtenerse una copia de la Licencia en
#
#      http://ec.europa.eu/idabc/eupl.html
#
# Salvo cuando lo exija la legislación aplicable o se acuerde por escrito, 
# el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
# SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
# Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
# que establece la Licencia.
*/

package {{ package_name }};
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.interceptor.Interceptors;
import com.ejie.x38.remote.TransactionMetadata;
import com.ejie.x38.remote.TransactionMetadataSkeletonInterceptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor;
import {{ service_package }}.{{ serviceName }};

/**
 * {{ serviceName }} + "Skeleton generated by UDA".
 * @author UDA
 */

@Stateless(mappedName = "{{ jndiName }}")
@TransactionManagement(TransactionManagementType.CONTAINER)
@Interceptors({SpringBeanAutowiringInterceptor.class, TransactionMetadataSkeletonInterceptor.class})
@Remote({{ serviceName }}SkeletonRemote.class)
@TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
@SuppressWarnings("rawtypes")
public class {{ serviceName }}Skeleton implements {{ serviceName }}SkeletonRemote {

    @Autowired
    private {{ serviceName }} {{ serviceName | lower }};

    {% for method in metodos %}
    {% set method_name, return_type, param_types = extract_java_types(method) %}
    /**
     * Method {{ method_name }}.
     *
     * @param transactionMetadata TransactionMetadata
     {% for param in param_types %}
     * @param {{ param }} arg{{ loop.index0 }}
     {% endfor %}
     {% if return_type != "void" %}
     * @return {{ return_type }}
     {% endif %}
     */
    @Override
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public {{ return_type }} {{ method_name }}(TransactionMetadata transactionMetadata{% for param in param_types %}, {{ param }} arg{{ loop.index0 }}{% endfor %}) {
        {% if return_type != "void" %}
        return this.{{ serviceName | lower }}.{{ method_name }}({% for param in param_types %}arg{{ loop.index0 }}{% if not loop.last %}, {% endif %}{% endfor %});
        {% else %}
        this.{{ serviceName | lower }}.{{ method_name }}({% for param in param_types %}arg{{ loop.index0 }}{% if not loop.last %}, {% endif %}{% endfor %});
        {% endif %}
    }
    {% endfor %}

    /**
     * Method 'get{{ serviceName }}'.
     *
     * @return {{ serviceName }}
     */
    protected {{ serviceName }} get{{ serviceName }}() {
        return this.{{ serviceName | lower }};
    }

    /**
     * Method 'set{{ serviceName }}'.
     *
     * @param {{ serviceName | lower }} {{ serviceName }}
     */
    public void set{{ serviceName }}({{ serviceName }} {{ serviceName | lower }}) {
        this.{{ serviceName | lower }} = {{ serviceName | lower }};
    }

}
