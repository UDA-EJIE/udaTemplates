/*
* Copyright 2021 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package ${pojo.getPackageName()}.service;

<#assign classbody>
<#assign declarationName = pojo.importType(pojo.getDeclarationName()) >
import ${pojo.importType(pojo.getPackageName()+'.model.'+pojo.getDeclarationName())};
<#-- calculamos los campos para luego no tener que estar recorrer el array -->

/**
${pojo.getClassJavaDoc(pojo.getDeclarationName() + "Service generated by UDA", 0)}, ${date}.
 * @author UDA
 */

public interface ${pojo.getDeclarationName()}Service {

	/**
	 * Inserts a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 *
	 * @return ${pojo.getDeclarationName()}
	 */
    ${pojo.getDeclarationName()} add(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});

	/**
	 * Updates a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 *
	 * @return ${pojo.getDeclarationName()}
	 */
	${pojo.getDeclarationName()} update(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});

	/**
	 * Finds a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 *
	 * @return ${pojo.getDeclarationName()}
	 */
	${pojo.getDeclarationName()} find(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});

	/**
	 * Deletes a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 */
	void remove(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});

	/**
	 * Finds a list of rows in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @param tableRequestDto ${pojo.importType("com.ejie.x38.dto.TableRequestDto")}
	 *
	 * @return ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}>
	 */
	${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAll(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}, ${pojo.importType("com.ejie.x38.dto.TableRequestDto")} tableRequestDto);

	/**
	 * Finds a List of rows containing the CP field in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @param startsWith boolean
	 *
	 * @return ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}>
	 */
	${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAllIds(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}, boolean startsWith);

	/**
	 * Finds rows in the ${pojo.getDeclarationName()} table using like.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @param tableRequestDto ${pojo.importType("com.ejie.x38.dto.TableRequestDto")}
     * @param startsWith Boolean
     * 
	 * @return ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}>
	 */
	${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAllLike(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}, ${pojo.importType("com.ejie.x38.dto.TableRequestDto")} tableRequestDto, Boolean startsWith);

	/*
	 * OPERACIONES RUP_TABLE
	 */

	/**
	 * Removes rows from the ${pojo.getDeclarationName()} table.
	 *
	 * @param tableRequestDto ${pojo.importType("com.ejie.x38.dto.TableRequestDto")}
	 */	
	void removeMultiple(${pojo.importType("com.ejie.x38.dto.TableRequestDto")} tableRequestDto);
   
    
	/**
	 * Filter method in the ${pojo.getDeclarationName()} table.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param tableRequestDto ${pojo.importType("com.ejie.x38.dto.TableRequestDto")}
	 * @param startsWith Boolean
	 *
	 * @return ${pojo.importType("com.ejie.x38.dto.TableResourceResponseDto")}<${pojo.getDeclarationName()}>
	 */	
	${pojo.importType("com.ejie.x38.dto.TableResourceResponseDto")}<${pojo.getDeclarationName()}> filter(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, ${pojo.importType("com.ejie.x38.dto.TableRequestDto")} tableRequestDto,  Boolean startsWith);
    
    /**
	 * Searches rows in the ${pojo.getDeclarationName()} table.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param search${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param tableRequestDto ${pojo.importType("com.ejie.x38.dto.TableRequestDto")}
	 * @param startsWith Boolean
	 *
	 * @return ${pojo.importType("java.util.List")}<${pojo.importType("com.ejie.x38.dto.TableRowDto")}<${pojo.getDeclarationName()}>>
	 */	
    ${pojo.importType("java.util.List")}<${pojo.importType("com.ejie.x38.dto.TableRowDto")}<${pojo.getDeclarationName()}>> search(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, ${pojo.getDeclarationName()} search${pojo.getDeclarationName()}, ${pojo.importType("com.ejie.x38.dto.TableRequestDto")} tableRequestDto, Boolean startsWith);
    
    /**
	 * Reorder the selection made in ${pojo.getDeclarationName()} table.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param tableRequestDto ${pojo.importType("com.ejie.x38.dto.TableRequestDto")}
	 * @param startsWith Boolean
	 *
	 * @return ${pojo.importType("java.lang.Object")}
	 */	
    ${pojo.importType("java.lang.Object")} reorderSelection(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, ${pojo.importType("com.ejie.x38.dto.TableRequestDto")} tableRequestDto, Boolean startsWith);
    
     
    /**
    * Exporta Datos al clipBoard
    *
    * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	* @param tableRequestDto TableRequestDto
    */
    ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> getDataForReports(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, ${pojo.importType("com.ejie.x38.dto.TableRequestDto")} tableRequestDto);
    
    /**
	 * Exporta Datos en su formato
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	void generateReport(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, String[] columns, String[] columnsName, String fileName, String sheetTitle,
			${pojo.importType("java.util.ArrayList")}<?> reportsParams, TableRequestDto tableRequestDto, ${pojo.importType("javax.servlet.http.HttpServletRequest")} request, 
			${pojo.importType("javax.servlet.http.HttpServletResponse")} response);
      <#foreach property in pojo.getAllPropertiesIterator()>
        <#if pojo.getMetaAttribAsBool(property, "gen-property", true)>
           <#if c2h.isManyToMany(property)>
                <#if c2h.isCollection(property)> 
                  <#include "serviceRelations.ftl"/>
                </#if> 								
           </#if>
        </#if>
     </#foreach>	
}
</#assign>
${pojo.generateImports()}
${classbody}