<#-- 
 -- Copyright 2011 E.J.I.E., S.A.
 --
 -- Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
 -- Solo podrá usarse esta obra si se respeta la Licencia.
 -- Puede obtenerse una copia de la Licencia en
 --
 --      http://ec.europa.eu/idabc/eupl.html
 --
 -- Salvo cuando lo exija la legislación aplicable o se acuerde por escrito, 
 -- el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
 -- SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
 -- Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
 -- que establece la Licencia.
 -->
package ${pojo.getPackageName()}.service;
<#assign classbody>
<#assign declarationName = pojo.importType(pojo.getDeclarationName()) >
import ${pojo.importType(pojo.getPackageName()+'.model.'+pojo.getDeclarationName())};
<#-- calculamos los campos para luego no tener que estar recorrer el array -->
<#if pojo.hasIdentifierProperty() && !c2j.isComponent(pojo.getIdentifierProperty())>
<#assign tipo=pojo.getIdentifierProperty().getType() >
<#assign Typejo = tipo.getReturnedClass().getName() >
	<#if Typejo?lower_case = 'int'><#assign TypeSimp='Integer'>
	<#else>
		<#assign TypeSimp = Typejo?substring(Typejo?last_index_of(".")+1,Typejo?length)>
	</#if>
</#if>

/**
 * ${pojo.getClassJavaDoc(pojo.getDeclarationName() + "ServiceImpl generated by UDA", 0)}, ${date}.
 * @author UDA
 */

<#if annot!=0>@${pojo.importType("org.springframework.stereotype.Service")}(value = "${ctrTl.stringDecapitalize(pojo.getDeclarationName())}Service")</#if>
public  class ${pojo.getDeclarationName()}ServiceImpl implements ${pojo.getDeclarationName()}Service {

	private static final  ${pojo.importType("org.slf4j.Logger")} logger = ${pojo.importType("org.slf4j.LoggerFactory")}.getLogger(${pojo.getDeclarationName()}ServiceImpl.class);
    <#if annot!=0>@${pojo.importType("org.springframework.beans.factory.annotation.Autowired")}</#if>
	private ${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.getDeclarationName()+'Dao')} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}Dao;
	<#foreach param in servJpa.getRelatedEntities(pojo,cfg)>
         <#if annot!=0>@${pojo.importType("org.springframework.beans.factory.annotation.Autowired")}</#if>
		  private ${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.beanCapitalize(param)+'Dao')} ${ctrTl.stringDecapitalize(param)}Dao;			
    </#foreach>	

	<#assign nombreDao ='${ctrTl.stringDecapitalize(pojo.getDeclarationName())}'+'Dao' >
	
	/**
	 * Inserts a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @return ${pojo.getDeclarationName()}
	 */
	@${pojo.importType("org.springframework.transaction.annotation.Transactional")}(rollbackFor = Throwable.class)
	public ${pojo.getDeclarationName()} add(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}) {
       return this.${nombreDao}.add(${ctrTl.stringDecapitalize(pojo.getDeclarationName())});
	}

	/**
	 * Updates a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @return ${pojo.getDeclarationName()}
	 */
	@${pojo.importType("org.springframework.transaction.annotation.Transactional")}(rollbackFor = Throwable.class)
	public ${pojo.getDeclarationName()} update(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}) {
		return this.${nombreDao}.update(${ctrTl.stringDecapitalize(pojo.getDeclarationName())});
	}

	/**
	 * Finds a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @return ${pojo.getDeclarationName()}
	 */
    public ${pojo.getDeclarationName()} find(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}) {
		return (${pojo.getDeclarationName()}) this.${nombreDao}.find(${ctrTl.stringDecapitalize(pojo.getDeclarationName())}.<#if pojo.hasIdentifierProperty() && !c2j.isComponent(pojo.getIdentifierProperty())>get${pojo.beanCapitalize(pojo.getIdentifierProperty().getName())}()<#else>getId()</#if>);
	}

	/**
	 * Finds a List of rows in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @param pagination ${pojo.importType("com.ejie.x38.dto.Pagination")}
	 * @return ${pojo.importType("java.util.List")} ${pojo.getDeclarationName()}
	 */
	public ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAll(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}, ${pojo.importType("com.ejie.x38.dto.Pagination")} pagination)  {
		return (${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}>) this.${nombreDao}.findAll(${ctrTl.stringDecapitalize(pojo.getDeclarationName())}, pagination);
	}

	/**
	 * Counts rows in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @return Long
	 */
	public Long findAllCount(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())})  {
		return  this.${nombreDao}.findAllCount(${ctrTl.stringDecapitalize(pojo.getDeclarationName())});
	}

	/**
	 * Finds a List of rows in the${pojo.getDeclarationName()} table using like.
	 *
	 * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
	 * @param pagination ${pojo.importType("com.ejie.x38.dto.Pagination")}
	 * @return ${pojo.importType("java.util.List")} ${pojo.getDeclarationName()}
	 */
	public ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAllLike(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case}, ${pojo.importType("com.ejie.x38.dto.Pagination")} pagination, Boolean startsWith) {
		return (${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}>) this.${nombreDao}.findAllLike(${pojo.getDeclarationName()?lower_case}, pagination, startsWith);
	}

	/**
	 * Deletes a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 * @return 
	 */
	@${pojo.importType("org.springframework.transaction.annotation.Transactional")}(rollbackFor = Throwable.class)
	public void remove(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}) {
		this.${nombreDao}.remove(${ctrTl.stringDecapitalize(pojo.getDeclarationName())}.<#if pojo.hasIdentifierProperty() && !c2j.isComponent(pojo.getIdentifierProperty())>get${pojo.beanCapitalize(pojo.getIdentifierProperty().getName())}()<#else>getId()</#if>);
	}	
	
    /**
     * Deletes multiple rows in the ${pojo.getDeclarationName()} table.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}List  ArrayList
	 * @return 
     */
	@${pojo.importType("org.springframework.transaction.annotation.Transactional")}(rollbackFor = Throwable.class)
    public void removeMultiple(${pojo.importType("java.util.ArrayList")}<${pojo.getDeclarationName()}> ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}List) {
		for (${pojo.getDeclarationName()}  ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}Aux:${ctrTl.stringDecapitalize(pojo.getDeclarationName())}List) {
			this.${nombreDao}.remove(${ctrTl.stringDecapitalize(pojo.getDeclarationName())}Aux.<#if pojo.hasIdentifierProperty() && !c2j.isComponent(pojo.getIdentifierProperty())>get${pojo.beanCapitalize(pojo.getIdentifierProperty().getName())}()<#else>getId()</#if>);
		}
    }

	<#-- metodos get y set del dao -->
	/**
	 * Method 'get${pojo.beanCapitalize(nombreDao)}'.
     *
	 * @return ${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.getDeclarationName()+'Dao')}
	 */
	public ${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.getDeclarationName()+'Dao')} get${pojo.beanCapitalize(nombreDao)}() {
		return this.${nombreDao};
	}

	/**
	 * Method 'set${pojo.beanCapitalize(nombreDao)}'.
     *
	 * @param ${nombreDao} ${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.getDeclarationName()+'Dao')}
	 * @return 
	 */
	public void set${pojo.beanCapitalize(nombreDao)}(${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.getDeclarationName()+'Dao')} ${nombreDao}) {
		logger.info("Setting Dependency "+${nombreDao});	
		this.${nombreDao} = ${nombreDao};
	}

	<#-- setters/getters manyToMany -->
	<#foreach param in servJpa.getRelatedEntities(pojo,cfg)>
	/**
	 * Method 'get${pojo.beanCapitalize(param)}'.
     *
	 * @return ${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.beanCapitalize(param)+'Dao')}
	 */
	public ${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.beanCapitalize(param)+'Dao')} get${pojo.beanCapitalize(param)}Dao() {
		return this.${ctrTl.stringDecapitalize(param)}Dao;
	}

	/**
	 * Method 'set${pojo.beanCapitalize(param)}'.
	 * 
	 * @param  ${ctrTl.stringDecapitalize(param)}Dao ${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.beanCapitalize(param)+'Dao')}
	 * @return 	 
	 */
	public void set${pojo.beanCapitalize(param)}Dao(${pojo.importType(pojo.getPackageName()+'.dao.'+pojo.beanCapitalize(param)+'Dao')} ${ctrTl.stringDecapitalize(param)}Dao) {
		logger.info("Setting Dependency "+${ctrTl.stringDecapitalize(param)}Dao);	
		this.${ctrTl.stringDecapitalize(param)}Dao = ${ctrTl.stringDecapitalize(param)}Dao;
	}
    </#foreach>	
	
	<#foreach property in pojo.getAllPropertiesIterator()>
			<#if pojo.getMetaAttribAsBool(property, "gen-property", true)>
				<#if c2h.isManyToMany(property)>
			          <#if c2h.isCollection(property)>
					    <#include "serviceRelationsImpl.ftl"/>
					</#if> 								
				</#if>
			</#if>
		</#foreach>	
}
</#assign>

${pojo.generateImports()}
${classbody}
