<#-- 
 -- Copyright 2011 E.J.I.E., S.A.
 --
 -- Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
 -- Solo podrá usarse esta obra si se respeta la Licencia.
 -- Puede obtenerse una copia de la Licencia en
 --
 --      http://ec.europa.eu/idabc/eupl.html
 --
 -- Salvo cuando lo exija la legislación aplicable o se acuerde por escrito, 
 -- el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
 -- SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
 -- Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
 -- que establece la Licencia.
 -->
package ${pojo.getPackageName()}.service;
<#assign classbody>
<#assign declarationName = pojo.importType(pojo.getDeclarationName()) >
import ${pojo.importType(pojo.getPackageName()+'.model.'+pojo.getDeclarationName())};
<#if pojo.hasIdentifierProperty() && !c2j.isComponent(pojo.getIdentifierProperty())>
<#assign tipo=pojo.getIdentifierProperty().getType() >
<#assign Typejo = tipo.getReturnedClass().getName() >
	<#if Typejo?lower_case = 'int'><#assign TypeSimp='Integer'>
	<#else>
		<#assign TypeSimp = Typejo?substring(Typejo?last_index_of(".")+1,Typejo?length)>
	</#if>
</#if>

/**
 * ${pojo.getClassJavaDoc(pojo.getDeclarationName() + "Service generated by UDA", 0)}, ${date}.
 * @author UDA
 */

public interface ${pojo.getDeclarationName()}Service {

	/**
	 * Inserts a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
	 * @return ${pojo.getDeclarationName()}
	 */
	${pojo.getDeclarationName()} add(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

	/**
	 * Updates a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
	 * @return ${pojo.getDeclarationName()}
	 */
	${pojo.getDeclarationName()} update(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

	/**
	 * Finds a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
	 * @return ${pojo.getDeclarationName()}
	 */
	${pojo.getDeclarationName()} find(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

	/**
	 * Finds a List of rows in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
	 * @param pagination ${pojo.importType("com.ejie.x38.dto.Pagination")}
	 * @return ${pojo.importType("java.util.List")} ${pojo.getDeclarationName()}
	 */
	${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAll(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case}, ${pojo.importType("com.ejie.x38.dto.Pagination")} pagination);

	 /**
	 * Counts rows in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
	 * @return Long
	 */
	Long findAllCount(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

	 /**
	 * Deletes a single row in the ${pojo.getDeclarationName()} table.
	 *
	 * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
	 * @return 
	 */
	void remove(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

    /**
     * Deletes multiple rows in the ${pojo.getDeclarationName()} table.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}List  ArrayList
	 * @return 
     */	
	void removeMultiple(${pojo.importType("java.util.ArrayList")}<${pojo.getDeclarationName()}> ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}List);
	
	/**
	 * Finds a List of rows in the${pojo.getDeclarationName()} table using like.
	 *
	 * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
	 * @param pagination ${pojo.importType("com.ejie.x38.dto.Pagination")}
	 * @return ${pojo.importType("java.util.List")} ${pojo.getDeclarationName()}
	 */
	${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAllLike(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case}, ${pojo.importType("com.ejie.x38.dto.Pagination")} pagination, Boolean startsWith) ;

	<#foreach property in pojo.getAllPropertiesIterator()>
			<#if pojo.getMetaAttribAsBool(property, "gen-property", true)>
				<#if c2h.isManyToMany(property)>
			          <#if c2h.isCollection(property)>
					    <#include "serviceRelations.ftl"/>
					  </#if> 								
				</#if>
			</#if>
	</#foreach>	
}	
</#assign>

${pojo.generateImports()}
${classbody}	
