<#-- 
 -- Copyright 2013 E.J.I.E., S.A.
 --
 -- Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
 -- Solo podrá usarse esta obra si se respeta la Licencia.
 -- Puede obtenerse una copia de la Licencia en
 --
 --      http://ec.europa.eu/idabc/eupl.html
 --
 -- Salvo cuando lo exija la legislación aplicable o se acuerde por escrito, 
 -- el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
 -- SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
 -- Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
 -- que establece la Licencia.
 -->
package ${pojo.getPackageName()}.control;

<#assign classbody>
<#assign declarationName = pojo.importType(pojo.getDeclarationName()) >
import ${pojo.importType(pojo.getPackageName()+'.model.'+pojo.getDeclarationName())};
<#foreach clases in  ctrlUtils.getFromParams(pojo,cfg)>
	 <#assign otros= pojo.importType(pojo.getPackageName()+'.model.'+clases)>
</#foreach>

/**
${pojo.getClassJavaDoc(pojo.getDeclarationName() + "Controller generated by UDA", 0)}, ${date}.
 * @author UDA
 */
 
<#if annot!=0>@${pojo.importType("org.springframework.stereotype.Controller")}</#if>
@${pojo.importType("org.springframework.web.bind.annotation.RequestMapping")} (value = "/${pojo.getDeclarationName()?lower_case}")

public class ${pojo.getDeclarationName()}Controller  {

	private static final ${pojo.importType("org.slf4j.Logger")} logger = ${pojo.importType("org.slf4j.LoggerFactory")}.getLogger(${pojo.getDeclarationName()}Controller.class);

	<#if annot!=0>@${pojo.importType("org.springframework.beans.factory.annotation.Autowired")}</#if>
	private ${pojo.importType(pojo.getPackageName()+'.service.'+pojo.getDeclarationName()+'Service')} ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service;
	
	/**
	 * Method 'getCreateForm'.
	 *
	 * @param model ${pojo.importType("org.springframework.ui.Model")}
	 * @return String
	 */
	@${pojo.importType("org.springframework.web.bind.annotation.RequestMapping")}(value = "maint", method = ${pojo.importType("org.springframework.web.bind.annotation.RequestMethod")}.GET)
	public String getCreateForm(${pojo.importType("org.springframework.ui.Model")} model) {
		${pojo.getDeclarationName()}Controller.logger.info("[GET - View] : ${pojo.getDeclarationName()?lower_case}");
		return "${pojo.getDeclarationName()?lower_case}";
	}

	<#assign camposDoc = ctrlUtils.getPrimaryKey(pojo,cfg)> 
	/**
	 * Method 'getById'.
	 *
	 <#list camposDoc as camposPrim>
	 * @param ${camposPrim[0]} ${pojo.importType(camposPrim[1])}
	 </#list>
	 * @return ${ctrl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
	 */
	<#assign primaria = ctrlUtils.getPrimaryKey(pojo,cfg)> 
	@${pojo.importType("org.springframework.web.bind.annotation.RequestMapping")}(value = "<#list primaria as camposPrim>/{${camposPrim[0]}}</#list>", method = ${pojo.importType("org.springframework.web.bind.annotation.RequestMethod")}.GET)
	<#assign primariaParam = ctrlUtils.getPrimaryKey(pojo,cfg)> 
	public @${pojo.importType("org.springframework.web.bind.annotation.ResponseBody")} ${pojo.getDeclarationName()} getById(<#list primariaParam as camposPrim>@${pojo.importType("org.springframework.web.bind.annotation.PathVariable")} ${pojo.importType(camposPrim[1])} ${camposPrim[0]}<#if camposPrim_has_next>, </#if></#list>) {
        ${pojo.getDeclarationName()} ${ctrl.stringDecapitalize(pojo.getDeclarationName())} = new ${pojo.getDeclarationName()}();
	<#if !isJpa>	
		<#foreach field in ctrlUtils.getPrimaryKeyCreator(pojo,cfg)>
			${ctrl.stringDecapitalize(pojo.getDeclarationName())}.set${pojo.beanCapitalize(field[0])};
		</#foreach>	
	<#else>
		<#if  clazz.getIdentifierProperty().isComposite()>
			${ctrl.stringDecapitalize(pojo.getDeclarationName())}.setId(new ${pojo.getDeclarationName()}Id());
		</#if>
	</#if>
	<#foreach field in ctrlUtils.getPrimaryKey(pojo,cfg)>
		${field[2]}.set${pojo.beanCapitalize(field[3])}(${field[0]});
	</#foreach>	
        ${ctrl.stringDecapitalize(pojo.getDeclarationName())} = this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service.find(${ctrl.stringDecapitalize(pojo.getDeclarationName())});
        ${pojo.getDeclarationName()}Controller.logger.info("[GET - findBy_PK] : Obtener ${pojo.getDeclarationName()} por PK");
        return ${ctrl.stringDecapitalize(pojo.getDeclarationName())};
	}

	/**
	 * Method 'getAll'.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @return List
	 */
	@${pojo.importType("org.springframework.web.bind.annotation.RequestMapping")}(method = ${pojo.importType("org.springframework.web.bind.annotation.RequestMethod")}.GET)
	public @${pojo.importType("org.springframework.web.bind.annotation.ResponseBody")} ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> getAll(@${pojo.importType("org.springframework.web.bind.annotation.ModelAttribute")} ${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}) {
		${pojo.getDeclarationName()}Controller.logger.info("[GET - find_ALL] : Obtener ${pojo.getDeclarationName()} por filtro");
	    return this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service.findAll(filter${pojo.getDeclarationName()}, null);
	}

	/**
	 * Method 'edit'.
	 *
	 * @param ${ctrl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()} 
	 * @return ${pojo.getDeclarationName()}
	 */
	@${pojo.importType("org.springframework.web.bind.annotation.RequestMapping")}(method = ${pojo.importType("org.springframework.web.bind.annotation.RequestMethod")}.PUT)
    public @${pojo.importType("org.springframework.web.bind.annotation.ResponseBody")} ${pojo.getDeclarationName()} edit(@${pojo.importType("org.springframework.web.bind.annotation.RequestBody")} ${pojo.getDeclarationName()} ${ctrl.stringDecapitalize(pojo.getDeclarationName())}) {		
        ${pojo.getDeclarationName()} ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Aux = this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service.update(${ctrl.stringDecapitalize(pojo.getDeclarationName())});
		${pojo.getDeclarationName()}Controller.logger.info("[PUT] : ${pojo.getDeclarationName()} actualizado correctamente");
        return ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Aux;
    }

	/**
	 * Method 'add'.
	 *
	 * @param ${ctrl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()} 
	 * @return ${pojo.getDeclarationName()}
	 */
	@${pojo.importType("org.springframework.web.bind.annotation.RequestMapping")}(method = ${pojo.importType("org.springframework.web.bind.annotation.RequestMethod")}.POST)
	public @${pojo.importType("org.springframework.web.bind.annotation.ResponseBody")} ${pojo.getDeclarationName()} add(@${pojo.importType("org.springframework.web.bind.annotation.RequestBody")} ${pojo.getDeclarationName()} ${ctrl.stringDecapitalize(pojo.getDeclarationName())}) {		
        ${pojo.getDeclarationName()} ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Aux = this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service.add(${ctrl.stringDecapitalize(pojo.getDeclarationName())});
        ${pojo.getDeclarationName()}Controller.logger.info("[POST] : ${pojo.getDeclarationName()} insertado correctamente");
    	return ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Aux;
	}

	/**
	 * Method 'remove'.
	 *
	 <#foreach field in ctrlUtils.getPrimaryKey(pojo,cfg)> 
	 * @param ${field[0]} ${pojo.importType(field[1])}
	 </#foreach>
	 * @return ${ctrl.stringDecapitalize(pojo.getDeclarationName())}
	 */
    <#assign primariaParam = ctrlUtils.getPrimaryKey(pojo,cfg)> 
	@${pojo.importType("org.springframework.web.bind.annotation.RequestMapping")}(value = "<#foreach field in ctrlUtils.getPrimaryKey(pojo,cfg)>/{${field[0]}}</#foreach>", method = ${pojo.importType("org.springframework.web.bind.annotation.RequestMethod")}.DELETE)
	@${pojo.importType("org.springframework.web.bind.annotation.ResponseStatus")}(value = ${pojo.importType("org.springframework.http.HttpStatus")}.OK)
    public @${pojo.importType("org.springframework.web.bind.annotation.ResponseBody")} ${pojo.getDeclarationName()} remove(<#list primariaParam as camposPrim>@${pojo.importType("org.springframework.web.bind.annotation.PathVariable")} ${pojo.importType(camposPrim[1])} ${camposPrim[0]}<#if camposPrim_has_next>, </#if></#list>) {
        ${pojo.getDeclarationName()} ${ctrl.stringDecapitalize(pojo.getDeclarationName())} = new ${pojo.getDeclarationName()}();
		<#if !isJpa>	
			<#foreach field in ctrlUtils.getPrimaryKeyCreator(pojo,cfg)>
				${ctrl.stringDecapitalize(pojo.getDeclarationName())}.set${pojo.beanCapitalize(field[0])};
			</#foreach>	
		<#else>
			<#if  clazz.getIdentifierProperty().isComposite()>
				${ctrl.stringDecapitalize(pojo.getDeclarationName())}.setId(new ${pojo.getDeclarationName()}Id());
			</#if>
		</#if>
	<#foreach field in ctrlUtils.getPrimaryKey(pojo,cfg)>
        ${field[2]}.set${pojo.beanCapitalize(field[3])}(${field[0]});
	</#foreach>	
        this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service.remove(${ctrl.stringDecapitalize(pojo.getDeclarationName())});
       	${pojo.getDeclarationName()}Controller.logger.info("[DELETE] : ${pojo.getDeclarationName()} borrado correctamente");
       	return ${ctrl.stringDecapitalize(pojo.getDeclarationName())};
    }
	
	/**
	 * Method 'removeAll'.
	 *
	 * @param ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Ids ${pojo.importType("java.util.List")}
	 * @return ${ctrl.stringDecapitalize(pojo.getDeclarationName())}List
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@${pojo.importType("org.springframework.web.bind.annotation.ResponseStatus")}(value = ${pojo.importType("org.springframework.http.HttpStatus")}.OK)
	public @${pojo.importType("org.springframework.web.bind.annotation.ResponseBody")} ${pojo.importType("java.util.List")}<${pojo.importType("java.util.List")}<String>> removeMultiple(@RequestBody ${pojo.importType("java.util.List")}<${pojo.importType("java.util.List")}<String>> ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Ids) {
        ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> ${ctrl.stringDecapitalize(pojo.getDeclarationName())}List = new ${pojo.importType("java.util.ArrayList")}<${pojo.getDeclarationName()}>();
        for (${pojo.importType("java.util.List")}<String> ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Id:${ctrl.stringDecapitalize(pojo.getDeclarationName())}Ids) {
		    ${pojo.importType("java.util.Iterator")}<String> iterator = ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Id.iterator();
		    ${pojo.getDeclarationName()} ${ctrl.stringDecapitalize(pojo.getDeclarationName())} = new ${pojo.getDeclarationName()}(); //NOPMD - Objeto nuevo en la lista (parametro del servicio)
			<#if !isJpa>	
				<#foreach field in ctrlUtils.getPrimaryKeyCreator(pojo,cfg)>
					${ctrl.stringDecapitalize(pojo.getDeclarationName())}.set${pojo.beanCapitalize(field[0])}; //NOPMD - Objeto nuevo en la lista (parametro del servicio)
				</#foreach>	
			<#else>
				<#if  clazz.getIdentifierProperty().isComposite()>
					${ctrl.stringDecapitalize(pojo.getDeclarationName())}.setId(new ${pojo.getDeclarationName()}Id()); //NOPMD - Objeto nuevo en la lista (parametro del servicio)
				</#if>	
			</#if>
		<#assign parametros = ctrlUtils.getPrimaryKey(pojo,cfg)> 
		<#foreach field in parametros>					
	        ${field[2]}.set${pojo.beanCapitalize(field[3])}(${pojo.importType("com.ejie.x38.util.ObjectConversionManager")}.convert(iterator.next(), ${field[1]}.class));
        </#foreach>
		    ${ctrl.stringDecapitalize(pojo.getDeclarationName())}List.add(${ctrl.stringDecapitalize(pojo.getDeclarationName())});
	    }
        this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service.removeMultiple(${ctrl.stringDecapitalize(pojo.getDeclarationName())}List);
		${pojo.getDeclarationName()}Controller.logger.info("[POST - DELETE_ALL] : ${pojo.getDeclarationName()} borrados correctamente");
		return ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Ids;
	}	

	/**
	 * Method 'getAllJQGrid'.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param pagination Pagination
	 * @return JQGridJSONModel
	 */
	@${pojo.importType("org.springframework.web.bind.annotation.RequestMapping")}(method = ${pojo.importType("org.springframework.web.bind.annotation.RequestMethod")}.GET, headers={"JQGridModel=true"})
	public @${pojo.importType("org.springframework.web.bind.annotation.ResponseBody")} ${pojo.importType("com.ejie.x38.dto.JQGridJSONModel")} getAllJQGrid(@${pojo.importType("org.springframework.web.bind.annotation.ModelAttribute")} ${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, @${pojo.importType("org.springframework.web.bind.annotation.ModelAttribute")} ${pojo.importType("com.ejie.x38.dto.Pagination")} pagination) {
        ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> ${ctrl.stringDecapitalize(pojo.getDeclarationName())}s = this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service.findAll(filter${pojo.getDeclarationName()}, pagination);
        Long recordNum = this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service.findAllCount(filter${pojo.getDeclarationName()});
        ${pojo.getDeclarationName()}Controller.logger.info("[GET - jqGrid] : Obtener ${pojo.getDeclarationName()}");
		return new JQGridJSONModel(pagination, recordNum, ${ctrl.stringDecapitalize(pojo.getDeclarationName())}s);
	}
	
<#if annot==0>
	/**
	 * Method 'set${pojo.getDeclarationName()}Service'.
	 *
	 * @param ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service ${pojo.getDeclarationName()}Service
	 * @return
	 */
	public void set${pojo.getDeclarationName()}Service(${pojo.getDeclarationName()}Service ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service) {
		this.${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service = ${ctrl.stringDecapitalize(pojo.getDeclarationName())}Service;
	}
</#if>
	<#foreach property in pojo.getAllPropertiesIterator()>
      <#if c2h.isManyToMany(property)>
        <#if c2h.isCollection(property)>
           <#include "controllerRelationsImpl.ftl"/>					
        </#if>
      </#if>
    </#foreach>	
}	
</#assign>
${ctrl.generateImports(pojo.getPackageName()+'.model', pojo.generateImports(), classbody)}
${classbody}