<#-- 
 -- Copyright 2013 E.J.I.E., S.A.
 --
 -- Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
 -- Solo podrá usarse esta obra si se respeta la Licencia.
 -- Puede obtenerse una copia de la Licencia en
 --
 --      http://ec.europa.eu/idabc/eupl.html
 --
 -- Salvo cuando lo exija la legislación aplicable o se acuerde por escrito, 
 -- el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
 -- SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
 -- Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
 -- que establece la Licencia.
 -->
package ${pojo.getPackageName()}.dao;

<#assign classbody>
<#assign declarationName = pojo.importType(pojo.getDeclarationName()) >
import ${pojo.importType(pojo.getPackageName()+'.model.'+pojo.getDeclarationName())};
<#-- calculamos los campos para luego no tener que estar recorrer el array -->

/**
${pojo.getClassJavaDoc(pojo.getDeclarationName() + "Dao generated by UDA", 0)}, ${date}.
 * @author UDA
 */

public interface ${pojo.getDeclarationName()}Dao {
    
    /**
     * Inserts a single row in the ${pojo.getDeclarationName()} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
     * @return ${pojo.getDeclarationName()}
     */
    ${pojo.getDeclarationName()} add(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

    /**
     * Updates a single row in the ${pojo.getDeclarationName()} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
     * @return ${pojo.getDeclarationName()}
     */
    ${pojo.getDeclarationName()} update(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

    /**
     * Finds a single row in the ${pojo.getDeclarationName()} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
     * @return ${pojo.getDeclarationName()}
     */
    ${pojo.getDeclarationName()} find(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

    /**
     * Removes a single row in the ${pojo.getDeclarationName()} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
     */
    void remove(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});

    /**
     * Finds a List of rows in the ${pojo.getDeclarationName()} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
     * @param jqGridRequestDto ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")}
     * @return ${pojo.importType("java.util.List")}
     */
    ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAll(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case}, ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")} jqGridRequestDto);

	/**
     * Finds rows in the ${pojo.getDeclarationName()} table using like.
     *
     * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
     * @param jqGridRequestDto ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")}
     * @param startsWith Boolean
     * @return ${pojo.importType("java.util.List")}
     */
	${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAllLike(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case}, ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")} jqGridRequestDto, Boolean startsWith);
	
	
	/*
	 * OPERACIONES RUP_TABLE
	 */
	 
	/**
	 * Filter in the ${pojo.getDeclarationName()} table.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param jqGridRequestDto ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")}
	 * @param startsWith Boolean
	 */	
	 void removeMultiple(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, JQGridRequestDto jqGridRequestDto, Boolean startsWith);
	
	
    /**
     * Counts rows in the ${pojo.getDeclarationName()} table using like.
     *
     * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
     * @param startsWith Boolean
     * @return Long
     */
    Long findAllLikeCount(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case}, Boolean startsWith);
    
    /**
     * Counts rows in the ${pojo.getDeclarationName()} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} ${pojo.getDeclarationName()}
     * @return Long
     */
    Long findAllCount(${pojo.getDeclarationName()} ${pojo.getDeclarationName()?lower_case});
    
    /**
	 * Reorder selection.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param jqGridRequestDto ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")}
	 * @param startsWith Boolean
	 * @return List<${pojo.importType("com.ejie.x38.dto.TableRowDto")}<${pojo.getDeclarationName()}>>
	 */	
    List<${pojo.importType("com.ejie.x38.dto.TableRowDto")}<${pojo.getDeclarationName()}>> reorderSelection(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")} jqGridRequestDto, Boolean startsWith);
    
     /**
	 * Searches in the Usuario table.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param search${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param jqGridRequestDto ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")}
	 * @param startsWith Boolean
	 * @return List<${pojo.importType("com.ejie.x38.dto.TableRowDto")}<${pojo.getDeclarationName()}>>	 
	 */	
    List<${pojo.importType("com.ejie.x38.dto.TableRowDto")}<${pojo.getDeclarationName()}>> search(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, ${pojo.getDeclarationName()} search${pojo.getDeclarationName()}, ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")} jqGridRequestDto, Boolean startsWith);

    /*
	 * OPERACIONES RUP_TABLE JERARQUIA
	 */
    
    /**
	 * Filter in the hierarchical ${pojo.getDeclarationName()} table.
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param jqGridRequestDto ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")}
	 * @return List<${pojo.importType("com.ejie.x38.dto.JerarquiaDto")}<${pojo.getDeclarationName()}>>
	 */	
	List<${pojo.importType("com.ejie.x38.dto.JerarquiaDto")}<${pojo.getDeclarationName()}>> findAllLikeJerarquia(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")} jqGridRequestDto);
	
	/**
	 * Count rows in hierarchy
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param jqGridRequestDto ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")}
	 * @return Long
	 */	
	Long findAllLikeCountJerarquia(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")} jqGridRequestDto);
	
	/**
	 * Find dependent hierarchical rows
	 *
	 * @param filter${pojo.getDeclarationName()} ${pojo.getDeclarationName()}
	 * @param jqGridRequestDto ${pojo.importType("com.ejie.x38.dto.JQGridRequestDto")}
	 * @return List<${pojo.importType("com.ejie.x38.dto.TableRowDto")}<${pojo.getDeclarationName()}>>
	 */	
	List<${pojo.importType("com.ejie.x38.dto.TableRowDto")}<${pojo.getDeclarationName()}>> findAllChild(${pojo.getDeclarationName()} filter${pojo.getDeclarationName()}, JQGridRequestDto jqGridRequestDto);
	
	
     <#foreach property in pojo.getAllPropertiesIterator()>
       <#if pojo.getMetaAttribAsBool(property, "gen-property", true)>
         <#if c2h.isManyToMany(property)>
           <#if c2h.isCollection(property)>   
              <#include "daoRelations.ftl"/>
          </#if> 								
         </#if>
       </#if>
      </#foreach>	
}
</#assign>
${pojo.generateImports()}
${classbody}
