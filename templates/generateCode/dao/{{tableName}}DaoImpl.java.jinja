/*
* Copyright 2024 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package {{packageName}}.dao;

import com.ejie.x38.dao.RowNumResultSetExtractor;
import com.ejie.x38.dto.TableManager;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.sql.DataSource;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import com.ejie.{{project_name}}.model.{{tableName}};

/**
 * {{tableName}}DaoImpl generated by UDA", {{date}}.
 * @author UDA
 */

@Transactional
public class {{tableName}}DaoImpl implements {{tableName}}Dao {

	/**
	 * StringBuilder initilization value
	 */
	public static final int STRING_BUILDER_INIT = 4096;

    protected static final String[] ORDER_BY_WHITE_LIST = new String[] { {% for column in columnsDates %}"{{ column.name }}"{% if loop.index != columnsDates|length %},{% endif%} {% endfor %}};

    private JdbcTemplate jdbcTemplate;

	/*
	 * ROW_MAPPERS
	 */
	private RowMapper<{{tableName}}> rwMap = new RowMapper<{{tableName}}>() {
		public {{tableName}} mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			return new {{tableName}}(
				{% for column in columnsDates %}resultSet.get{{ column.DATO_TYPE }}("{{ column.name }}"){% if loop.index != columnsDates|length %},{% endif%} {% endfor %}
			);
		}
	};

	private RowMapper<{{tableName}}> rwMapPK = new RowMapper<{{tableName}}>() {
		public {{tableName}} mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			return new {{tableName}}(
				{% for column in listPks %}resultSet.get{{ column.DATO_TYPE }}("{{ column.name }}"){% if loop.index != listPks|length %},{% endif%} {% endfor %}
           	);
    	}
  	};

	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     *
     * @return
     */
    @Autowired
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

	/*
	 * OPERACIONES CRUD
	 */

    /**
     * Inserts a single row in the {{tableName}} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} {{tableName}}
     *
     * @return {{tableName}}
     */
	public {{tableName}} add({{tableName}} ${pojo.getDeclarationName()?lower_case}) {
		<#assign parametros = utilidadesDao.getInsertFields(pojo,cfg)>
    	<#assign interrogaciones = parametros >
    	String query = "INSERT INTO ${ctrTl.findDataBaseName(pojo.getDeclarationName())?upper_case} (<#list parametros as param>${param}<#if param_has_next>, </#if></#list>) VALUES (<#list interrogaciones as param>?<#if param_has_next>,</#if></#list>)";
		<#assign valoresInsert = utilidadesDao.getInsertValues(pojo,cfg)>
		<#assign nulablesFields = valoresInsert>
		<#list nulablesFields as ifsValoRes>
			<#if ifsValoRes[1]!= '0'>
				   Object ${ifsValoRes[4]}Aux=null;
		     if (${ifsValoRes[2]}!= null <#if ifsValoRes[3]!=''> && ${ifsValoRes[3]}</#if> && ${ifsValoRes[0]}!=null ){
			     ${ifsValoRes[4]}Aux=${ifsValoRes[0]};
		   	  }
		   </#if>
		</#list>
		this.jdbcTemplate.update(query, <#list valoresInsert as param><#if param[1]!= '0'>${param[4]}Aux<#else>${param[0]}</#if><#if param_has_next>, </#if></#list>);
		return ${pojo.getDeclarationName()?lower_case};
	}

    /**
     * Updates a single row in the {{tableName}} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} {{tableName}}
     *
     * @return {{tableName}}
     */
    public {{tableName}} update({{tableName}} ${pojo.getDeclarationName()?lower_case}) {
    	<#assign paramSetter =utilidadesDao.getUpdateFields(pojo,cfg)>
		<#assign paramWhere = utilidadesDao.getWherePk(pojo,cfg,false)>
		String query = "UPDATE ${ctrTl.findDataBaseName(pojo.getDeclarationName())?upper_case} SET <#list paramSetter as param>${param}=?<#if param_has_next>, </#if></#list> WHERE <#list paramWhere as param>${param}=?<#if param_has_next> AND </#if></#list>";
		<#assign paramUpdate = utilidadesDao.camposQueryUpdate(pojo,cfg)>
		<#assign nulablesFields = utilidadesDao.getInsertValues(pojo,cfg)>
		<#assign compuesto = 0>
		<#list nulablesFields as ifsValoRes>
			<#if ifsValoRes[1]!= '0'>
				   Object ${ifsValoRes[4]}Aux = null;
		     if (${ifsValoRes[2]} != null <#if ifsValoRes[3]!=''> && ${ifsValoRes[3]}</#if> && ${ifsValoRes[0]} != null) {
			     ${ifsValoRes[4]}Aux = ${ifsValoRes[0]};
		   	  }
		   	  <#assign compuesto = 1>
		   </#if>
		</#list>
		<#if compuesto == 1>
		this.jdbcTemplate.update(query, <#list nulablesFields as param><#if param[1]!= '0'>${param[4]}Aux<#else>${param[0]}</#if><#if param_has_next>, </#if></#list>);
		<#else>
		this.jdbcTemplate.update(query, <#list paramUpdate as param><#if param[1]!= '0'>${param[4]}Aux<#else>${param[0]}</#if><#if param_has_next>, </#if></#list>);
		</#if>
		return ${pojo.getDeclarationName()?lower_case};
	}

    /**
     * Finds a single row in the {{tableName}} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} {{tableName}}
     *
     * @return {{tableName}}
     */
    @Transactional (readOnly = true)
    public {{tableName}} find({{tableName}} ${pojo.getDeclarationName()?lower_case}) {
		<#assign paramSelectFind = utilidadesDao.camposSelectFind(pojo,cfg)>
		<#assign paramTablaSelect = utilidadesDao.tablasSelect(pojo,cfg)>
		<#assign paramWhereFields = utilidadesDao.whereFindPK(pojo,cfg)>
		<#assign paramPk = utilidadesDao.commaPrimary(pojo,cfg)>
		String query = "SELECT <#list paramSelectFind as param>${param}<#if param_has_next>, </#if></#list> FROM <#list paramTablaSelect as param>${param}<#if param_has_next>, </#if></#list> WHERE <#list paramWhereFields as param>${param}<#if param_has_next> AND </#if></#list>";

		List<{{tableName}}> ${pojo.getDeclarationName()?lower_case}List = this.jdbcTemplate.query(query, this.rwMap, <#list paramPk as param>${param}<#if param_has_next> , </#if></#list>);
		return DataAccessUtils.uniqueResult(${pojo.getDeclarationName()?lower_case}List);
    }

    /**
     * Removes a single row in the {{tableName}} table.
     *
     * @param ${pojo.getDeclarationName()?lower_case} {{tableName}}
     */
    public void remove({{tableName}} ${pojo.getDeclarationName()?lower_case}) {
		<#assign paramPkRemove = utilidadesDao.commaPrimary(pojo,cfg)>
		<#assign paramWhereRemove = utilidadesDao.getWherePk(pojo,cfg,false)>
		String query = "DELETE FROM ${ctrTl.findDataBaseName(pojo.getDeclarationName())?upper_case} WHERE <#list paramWhereRemove as param>${param}=?<#if param_has_next> AND </#if></#list>";
		this.jdbcTemplate.update(query, <#list paramPkRemove as param>${param}<#if param_has_next> , </#if></#list>);
    }
    
   	public List<{{tableName}}> getMultiple({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith) {
    	<#assign paramSelectFind = utilidadesDao.camposSelectFind(pojo,cfg)>
    	<#assign paramTablaSelect = utilidadesDao.tablasSelect(pojo,cfg)>
    	<#assign paramWhere = utilidadesDao.getWherePk(pojo,cfg,false)>
    	// SELECT
    	StringBuilder query = new StringBuilder("SELECT <#list paramSelectFind as param>${param}<#if param_has_next>, </#if></#list> ");
    	// FROM
    	query.append("FROM <#list paramTablaSelect as param>${param}<#if param_has_next>, </#if></#list>");
    	// WHERE clause & Params
    	Map<String, Object> mapaWhere = this.getWhereLikeMap(filter{{tableName}}, startsWith);
    	StringBuilder where = new StringBuilder(" WHERE 1=1 ");
    	where.append(mapaWhere.get("query"));
    	query.append(where);
    	
    	@SuppressWarnings("unchecked")
    	List<Object> params = (List<Object>) mapaWhere.get("params");
    	<#assign paramWhereRemove = paramWhere>
    	
    	StringBuilder sbMultipleSQL = query.append(TableManager.getSelectMultipleQuery(tableRequestDto, {{tableName}}.class, params, {{tableName}}DaoImpl.ORDER_BY_WHITE_LIST, <#list paramWhere as param>"${param?lower_case}"<#if param_has_next>,</#if></#list>));
    	
    	return this.jdbcTemplate.query(sbMultipleSQL.toString(), this.rwMap, params.toArray());
    }

   {# {% include 'findAllDinamycRelImpl.jinja' %}
   {% include 'daoRelationsImpl.jinja' %}   #} 
}