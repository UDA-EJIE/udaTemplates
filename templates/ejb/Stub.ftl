package ${packageNameRemoting};
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.interceptor.Interceptors;
<#foreach parametro in skeletonUtils.generateParameterImports(methods,false)>	
import ${stubUtils.replaceDto(parametro)};
</#foreach>
<#if isEjb3>
import ${namePackageEjb}.${serviceName}SkeletonRemote ;
<#else>
import ${namePackageEjb}.${serviceName}Home ;
import ${namePackageEjb}.${serviceName} ;
</#if>
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor;
import com.ejie.x38.remote.RemoteEJBFactory;
import com.ejie.x38.remote.TransactionMetadata;
import com.ejie.x38.remote.TransactionMetadataStubInterceptor;
import com.ejie.x38.util.StackTraceManager;
/**
* "${serviceName}Stub generated by UDA 1.0".
* @author UDA
 */
@Stateless(mappedName = "${jndiName}")
@TransactionManagement(TransactionManagementType.CONTAINER)
@TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
@Interceptors({SpringBeanAutowiringInterceptor.class, TransactionMetadataStubInterceptor.class})
@Remote(${serviceName}StubRemote.class)
public class ${serviceName}Stub implements ${serviceName}StubRemote   {
	private static final Logger logger = Logger.getLogger(${serviceName}Stub.class);
	<#if isEjb3>
		private ${serviceName}SkeletonRemote ${ctrUtils.stringDecapitalize(serviceName)}SkeletonRemote;
	<#else>
		private ${serviceName}Home ${ctrUtils.stringDecapitalize(serviceName)}Home;
		private ${serviceName} ${ctrUtils.stringDecapitalize(serviceName)};
	</#if>
	@Autowired
	private RemoteEJBFactory remoteEJBFactory;
    

	 <#assign param ="">
	<#assign listaMetodos = methods>
	<#list methods as metodo>
	    <#assign param = metodo[3]>
		<#assign creator=stubUtils.generateParameterConstructor(metodo[1])>
		/*   method ${metodo[0]}.
		*<#foreach parametro in skeletonUtils.getParametersSkeleton(param,false,false)>
		* @param ${ctrUtils.stringDecapitalize(stubUtils.replaceDto(parametro))} ${stubUtils.replaceDto(parametro)} </#foreach>
		* @return <#foreach parametro in skeletonUtils.getParametersSkeleton(metodo[1]+';',false,false)>${stubUtils.replaceDto(parametro)}</#foreach>
		*/
	<#if isEjb3>
		@Override
		${skeletonUtils.generateTransactionAttribute(metodo[0])}
		public <#if isJpa><#foreach parametro in skeletonUtils.getParametersSkeleton(metodo[1]+';',false,false)>${stubUtils.replaceDto(parametro)}</#foreach><#else>${metodo[2]}</#if> ${metodo[0]} (<#list skeletonUtils.getParametersSkeleton(param,false,false) as parametro>${stubUtils.replaceDto(parametro)} ${ctrUtils.stringDecapitalize(stubUtils.replaceDto(parametro))}Var<#if parametro_has_next>,</#if></#list> ) {
			<#foreach parametro in skeletonUtils.getParametersSkeleton(metodo[1]+';',false,false)><#if parametro!='void'>return</#if>
			<#if creator!=''>
				${creator}(
			</#if>
			</#foreach> this.${ctrUtils.stringDecapitalize(serviceName)}SkeletonRemote.${metodo[0]}( <#list skeletonUtils.getParametersSkeleton(param,false,false) as parametro><#if parametro!='Pagination' && parametro!='ArrayList' && parametro!='List'>${ctrUtils.stringDecapitalize(stubUtils.replaceDto(parametro))}Var,<#else>${ctrUtils.stringDecapitalize(stubUtils.replaceDto(parametro))}Var,</#if></#list>new TransactionMetadata())
			<#if creator!=''>
				)
			</#if>
			;
			
		}
	<#else>
	    @Override
		${skeletonUtils.generateTransactionAttribute(metodo[0])}
		public <#if isJpa><#foreach parametro in skeletonUtils.getParametersSkeleton(metodo[1]+';',false,false)>${parametro}</#foreach><#else>${metodo[2]}</#if> ${metodo[0]} (<#list skeletonUtils.getParametersSkeleton(param,false,false) as parametro>${parametro} ${ctrUtils.stringDecapitalize(parametro)}Var<#if parametro_has_next>,</#if></#list> )throws Exception{
			<#foreach parametro in skeletonUtils.getParametersSkeleton(metodo[1]+';',false,false)><#if parametro!='void'>return</#if></#foreach> this.${ctrUtils.stringDecapitalize(serviceName)}.${metodo[0]}( <#list skeletonUtils.getParametersSkeleton(param,false,false) as parametro><#if parametro!='Pagination' && parametro!='ArrayList' && parametro!='List'>${ctrUtils.stringDecapitalize(parametro)}Var<#else>${ctrUtils.stringDecapitalize(parametro)}Var</#if><#if parametro_has_next>,</#if></#list>);
			
		}
	</#if>	
	</#list>

	<#if isEjb3>
	@SuppressWarnings("unused")
	@PostConstruct
	private void init(){
		try{
			${ctrUtils.stringDecapitalize(serviceName)}SkeletonRemote = (${serviceName}SkeletonRemote) remoteEJBFactory.lookup("${nameServer}", ${serviceName}SkeletonRemote.class);
			logger.log(Level.INFO, "Obtained remote Skeleton is: "+${ctrUtils.stringDecapitalize(serviceName)}SkeletonRemote.toString());
		}catch(Exception e){
			logger.log(Level.ERROR, StackTraceManager.getStackTrace(e));
		}
	}
	<#else>
	@SuppressWarnings("unused")
	@PostConstruct
	private void init() throws Exception{
	    try{
			${ctrUtils.stringDecapitalize(serviceName)}Home = (${serviceName}Home) remoteEJBFactory.lookup("${nameServer}", ${serviceName}Home.class);
			this.${ctrUtils.stringDecapitalize(serviceName)} = ${ctrUtils.stringDecapitalize(serviceName)}Home.create();
		    logger.log(Level.INFO, ${ctrUtils.stringDecapitalize(serviceName)}.toString());
		}catch(Exception e){
		    logger.log(Level.ERROR, StackTraceManager.getStackTrace(e));
			throw e;
		}
	}
	</#if>
	
	<#if isEjb3>
	@SuppressWarnings("unused")
	@PreDestroy
	private void destroy(){
		logger.log(Level.INFO, "Deleting cached instance of "+${serviceName}SkeletonRemote.class+" before destroying this EJB");
		remoteEJBFactory.clearInstance(${serviceName}SkeletonRemote.class);
	}
	<#else>
	   
	@SuppressWarnings("unused")
	@PreDestroy
	private void destroy(){
		logger.log(Level.INFO, "Deleting cached instance of "+${serviceName}Home.class+" before destroying this EJB");
		remoteEJBFactory.clearInstance(${serviceName}Home.class);
	}
	</#if>

	public RemoteEJBFactory getRemoteEJBFactory() {
		return remoteEJBFactory;
	}

	public void setRemoteEJBFactory(RemoteEJBFactory remoteEJBFactory) {
		this.remoteEJBFactory = remoteEJBFactory;
	}
}