package ${pojo.getPackageName()}.service;

<#assign classbody>
<#assign declarationName = pojo.importType(pojo.getDeclarationName()) >
import ${pojo.importType(pojo.getPackageName()+'.model.'+pojo.getDeclarationName())};
<#-- calculamos los campos para luego no tener que estar recorrer el array -->

/**
${pojo.getClassJavaDoc(pojo.getDeclarationName() + "Service generated by UDA 1.0", 0)}, ${date}.
* @author UDA
*/
public interface ${pojo.getDeclarationName()}Service {

    /**
     * Inserts a single row in the ${pojo.getDeclarationName()} table.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
     * @return ${pojo.getDeclarationName()}
     */
    ${pojo.getDeclarationName()} add(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});

    /**
     * Updates a single row in the ${pojo.getDeclarationName()} table.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
     * @return ${pojo.getDeclarationName()}
     */
    ${pojo.getDeclarationName()} update(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});

    /**
    * Finds a single row in the ${pojo.getDeclarationName()} table.
    *
    * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
    * @return ${pojo.getDeclarationName()}
    */
    ${pojo.getDeclarationName()} find(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});

    /**
     * Finds a List of rows in the ${pojo.getDeclarationName()} table.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
     * @param pagination ${pojo.importType("com.ejie.x38.dto.Pagination")}
     * @return ${pojo.importType("java.util.List")}
     */
    ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAll(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}, ${pojo.importType("com.ejie.x38.dto.Pagination")} pagination);

    /**
    * Counts rows in the ${pojo.getDeclarationName()} table.
    *
    * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
    * @return Long
    */
    Long findAllCount(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});
    /**
     * Finds rows in the ${pojo.getDeclarationName()} table using like.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
     * @param pagination ${pojo.importType("com.ejie.x38.dto.Pagination")}
     * @return ${pojo.importType("java.util.List")}
     */
      ${pojo.importType("java.util.List")}<${pojo.getDeclarationName()}> findAllLike(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}, ${pojo.importType("com.ejie.x38.dto.Pagination")} pagination, Boolean startsWith) ;
  
    /**
     * Deletes a single row in the ${pojo.getDeclarationName()} table.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} ${pojo.getDeclarationName()}
     */
    void remove(${pojo.getDeclarationName()} ${ctrTl.stringDecapitalize(pojo.getDeclarationName())});
	
    /**
     * Deletes multiple rows in the ${pojo.getDeclarationName()} table.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}List  ArrayList
     */	
	void removeMultiple(${pojo.importType("java.util.ArrayList")}<${pojo.getDeclarationName()}> ${ctrTl.stringDecapitalize(pojo.getDeclarationName())}List);
    
      <#foreach property in pojo.getAllPropertiesIterator()>
        <#if pojo.getMetaAttribAsBool(property, "gen-property", true)>
           <#if c2h.isManyToMany(property)>
                <#if c2h.isCollection(property)> 
                  <#include "serviceJDBCRelations.ftl"/>
                </#if> 								
           </#if>
        </#if>
     </#foreach>	
}

</#assign>

${pojo.generateImports()}
${classbody}
