/*
* Copyright 2024 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package {{packageName}}.dao;

import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;
import java.util.List;
import com.ejie.{{project_name}}.model.{{tableName}};

/**
 * {{tableName}}Dao generated by UDA", {{date}}.
 * @author UDA
 */

public interface {{tableName}}Dao {
    
    /**
     * Inserts a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
    {{tableName}} add({{tableName}} {{tableNameDecapitalize}});

    /**
     * Updates a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
    {{tableName}} update({{tableName}} {{tableNameDecapitalize}});

    /**
     * Finds a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
    {{tableName}} find({{tableName}} {{tableNameDecapitalize}});

    /**
     * Removes a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     */
    void remove({{tableName}} {{tableNameDecapitalize}});

    /**
     * Finds a List of rows in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     * @param tableRequestDto TableRequestDto
     *
     * @return List<{{tableName}}>
     */
    List<{{tableName}}> findAll({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto);

    /**
     * Finds a List of rows containing the CP field in the {{tableName}} table.
     *
     * @param ${ctrTl.stringDecapitalize(pojo.getDeclarationName())} {{tableName}}
	 * @param startsWith boolean
     *
     * @return List<{{tableName}}>
     */
    List<{{tableName}}> findAllIds({{tableName}} {{tableNameDecapitalize}}, boolean startsWith);

	/**
     * Finds rows in the {{tableName}} table using like.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     *
     * @return List<{{tableName}}>
     */
	List<{{tableName}}> findAllLike({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto, Boolean startsWith);
	
	
	/*
	 * OPERACIONES RUP_TABLE
	 */
	 
	/**
	 * Filter in the {{tableName}} table.
	 *
	 * @param tableRequestDto TableRequestDto
	 */	
	 void removeMultiple(TableRequestDto tableRequestDto);
	
    /**
     * Counts rows in the {{tableName}} table using like.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     * @param startsWith Boolean
     *
     * @return Long
     */
    Long findAllLikeCount({{tableName}} {{tableNameDecapitalize}}, Boolean startsWith);
    
    /**
     * Counts rows in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return Long
     */
    Long findAllCount({{tableName}} {{tableNameDecapitalize}});
    
    /**
	 * Reorder selection.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 *
	 * @return List<TableRowDto<{{tableName}}>>
	 */	
    List<TableRowDto<{{tableName}}>> reorderSelection({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith);
    
    /**
	 * Searches in the Usuario table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param search{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 *
	 * @return List<TableRowDto<{{tableName}}>>	 
	 */	
    List<TableRowDto<{{tableName}}>> search({{tableName}} filter{{tableName}}, {{tableName}} search{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith);
  
  	List<{{tableName}}> getMultiple({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith);
}