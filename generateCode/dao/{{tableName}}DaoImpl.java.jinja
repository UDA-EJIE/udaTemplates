/*
* Copyright 2024 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package {{packageName}}.dao;

import com.ejie.x38.dao.RowNumResultSetExtractor;
import com.ejie.x38.dto.TableManager;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.sql.DataSource;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import com.ejie.{{project_name}}.model.{{tableName}};

/**
 * {{tableName}}DaoImpl generated by UDA", {{date}}.
 * @author UDA
 */
@Repository
@Transactional
public class {{tableName}}DaoImpl implements {{tableName}}Dao {

	/**
	 * StringBuilder initilization value
	 */
	public static final int STRING_BUILDER_INIT = 4096;

    protected static final String[] ORDER_BY_WHITE_LIST = new String[] { {% for column in columnasDaos %}"{{ column.name }}"{% if loop.index != columnasDaos|length %},{% endif%} {% endfor %}};

    private JdbcTemplate jdbcTemplate;

	/*
	 * ROW_MAPPERS
	 */
	private RowMapper<{{tableName}}> rwMap = new RowMapper<{{tableName}}>() {
		public {{tableName}} mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			return new {{tableName}}({% if not constructorEntidad %}	
			{% for column in columnasDaos %}resultSet.get{{ column.DATO_TYPE|replace("Integer", "Int") }}("{{ column.name }}"){% if loop.index != columnasDaos|length %},{% endif%} {% endfor %} {%else%}
			{% for column in allColumns %}resultSet.get{{ column.DATO_TYPE|replace("Integer", "Int") }}("{{ column.name }}"){% if loop.index != allColumns|length %},{% endif%} {% endfor %} 
			{%endif%}
			);

		}
	};

	private RowMapper<{{tableName}}> rwMapPK = new RowMapper<{{tableName}}>() {
		public {{tableName}} mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			return new {{tableName}}(
				{% for column in listPks %}resultSet.get{{ column.DATO_TYPE|replace("Integer", "Int") }}("{{ column.name }}"){% if loop.index != listPks|length %},{% endif%} {% endfor %}
           	);
    	}
  	};

	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     *
     * @return
     */
    @Autowired
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

	/*
	 * OPERACIONES CRUD
	 */

    /**
     * Inserts a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
	@Override 
	public {{tableName}} add({{tableName}} {{tableNameDecapitalize}}) {

    	String query = "INSERT INTO {{tableNameOriginal.upper()}} ({% for column in columnasDaos %}{{ column.name}}{% if loop.index != columnasDaos|length %},{% endif%} {% endfor %}) VALUES ({% for column in columnasDaos %}?{% if loop.index != columnasDaos|length %},{% endif%} {% endfor %})";

		{% if dao is not none %}
			Object 	get{{entidadPadre}}{{primaryKeyPadre}}Aux = null;
			if ({{tableNameDecapitalize}}.get{{entidadPadre}}()!= null && {{tableNameDecapitalize}}.get{{entidadPadre}}().get{{primaryKeyPadre}}()!=null ){
				get{{entidadPadre}}{{primaryKeyPadre}}Aux= {{tableNameDecapitalize}}.get{{entidadPadre}}().get{{primaryKeyPadre}}();
			}
		{% endif %}		
		this.jdbcTemplate.update(query, {% for column in columnasDaos %}{{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}(){% if loop.index != columnasDaos|length %},{% endif%} {% endfor %});
		return {{tableNameDecapitalize}};
	}

    /**
     * Updates a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
	@Override 
    public {{tableName}} update({{tableName}} {{tableNameDecapitalize}}) {

		String query = "UPDATE {{tableNameOriginal.upper()}} SET {% for column in columnasDaos %}{% if column.primaryKey != 'P' %} {{ column.name }}=?{% if loop.index != columnasDaos|length %},{% endif%}{% endif%}{% endfor %} WHERE {% for column in listPks %}{{ column.name }}=?{% if loop.index != listPks|length %},{% endif%} {% endfor %}";
			
			{% if dao is not none %}
			Object 	get{{entidadPadre}}{{primaryKeyPadre}}Aux = null;
			if ({{tableNameDecapitalize}}.get{{entidadPadre|snakeToCamel}}()!= null && {{tableNameDecapitalize}}.get{{entidadPadre|snakeToCamel}}().get{{primaryKeyPadre}}()!=null ){
				get{{entidadPadre|snakeToCamel}}{{primaryKeyPadre|snakeToCamel}}Aux= {{tableNameDecapitalize}}.get{{entidadPadre|snakeToCamel}}().get{{primaryKeyPadre|snakeToCamel}}();
			}
			{% endif %}
		this.jdbcTemplate.update(query, {% for column in columnasDaos %}{% if column.primaryKey != 'P' %}{{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}(),{% endif%} {% endfor %}{% for column in listPks %} {{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}() {% if loop.index != listPks|length %},{% endif%} {% endfor %});
	
		return {{tableNameDecapitalize}};
	}

    /**
     * Finds a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
	@Override 
    @Transactional (readOnly = true)
    public {{tableName}} find({{tableName}} {{tableNameDecapitalize}}) {

		String query = "SELECT {% for column in columnasDaos %} t1.{{ column.name }} {{ column.name }}{% if loop.index != columnasDaos|length %},{% endif%}{% endfor %} {% if dao is not none %}, {% for column in padreOriginalCol %} t2.{{ column.name }} {{ column.name }}{% if loop.index != padreOriginalCol|length %},{% endif%}{% endfor %}{%endif %} FROM {{tableNameOriginal.upper()}} t1 {% if dao is not none%} {{entidadPadre.upper()}} , t2 {% endif%} WHERE {% for column in listPks %}t1.{{ column.name }}=?{% if loop.index != listPks|length %},{% endif%} {% endfor %} {% if dao is not none %} AND t1.{{tableFKey}}=t2.{{primaryKPadre}}(+){% endif %}";

		List<{{tableName}}> {{tableNameDecapitalize}}List = this.jdbcTemplate.query(query, this.rwMap, {% for column in listPks %}{{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}(){% if loop.index != listPks|length %},{% endif%} {% endfor %});
		return DataAccessUtils.uniqueResult({{tableNameDecapitalize}}List);
    }

    /**
     * Removes a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     */
	@Override 
    public void remove({{tableName}} {{tableNameDecapitalize}}) {
	
		String query = "DELETE FROM {{tableNameOriginal.upper()}} WHERE {% for column in listPks %}t1.{{ column.name }}=?{% if loop.index != listPks|length %},{% endif%} {% endfor %}";
		this.jdbcTemplate.update(query, {% for column in listPks %}{{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}(){% if loop.index != listPks|length %},{% endif%} {% endfor %});
    }
    @Override
   	public List<{{tableName}}> getMultiple({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith) {

    	// SELECT
    	StringBuilder query = new StringBuilder("SELECT {% for column in columnasDaos %} t1.{{ column.name }} {{ column.name }}{% if loop.index != columnasDaos|length %},{% endif%}{% endfor %} {% if dao is not none %}, {% for column in padreOriginalCol %} t2.{{ column.name }} {{ column.name }}{% if loop.index != padreOriginalCol|length %},{% endif%}{% endfor %}{%endif %} ");
    	// FROM
    	query.append("FROM {{tableNameOriginal.upper()}} t1 {% if dao is not none %} , {{entidadPadre.upper()}} t2 {% endif %}");
    	// WHERE clause & Params
    	Map<String, Object> mapaWhere = this.getWhereLikeMap(filter{{tableName}}, startsWith);
    	StringBuilder where = new StringBuilder(" WHERE 1=1 ");
    	where.append(mapaWhere.get("query"));
    	query.append(where);
    	
    	@SuppressWarnings("unchecked")
    	List<Object> params = (List<Object>) mapaWhere.get("params");
    	
    	StringBuilder sbMultipleSQL = query.append(TableManager.getSelectMultipleQuery(tableRequestDto, {{tableName}}.class, params, "{% for column in listPks %}{{ column.name }}{% if loop.index != listPks|length %} AND {% endif%}{% endfor %}"));
    	
    	return this.jdbcTemplate.query(sbMultipleSQL.toString(), this.rwMap, params.toArray());
    }

	/**
	 * Returns a map with the needed value to create the conditions to filter by  
	 * the {{tableName}} entity 
	 * 
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 *            Bean with the criteria values to filter by.
     * @param startsWith Boolean	 
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generación de código de UDA
	private Map<String, Object> getWhereLikeMap ({{tableName}} {{tableNameDecapitalize}}, Boolean startsWith){

		StringBuffer where = new StringBuffer({{tableName}}DaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		{% for column in allColumns %}
		if ({{tableNameDecapitalize}}  != null  && {{tableNameDecapitalize}}.get{{column.name|toCamelCase }}() != null ) {
			{% if column.DATO_TYPE == 'String' %}
			where.append(" AND UPPER(t1.{{column.name}}) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add({{tableNameDecapitalize}}.get{{column.name|toCamelCase }}().toUpperCase() +"%");
			}else{
				params.add("%"+{{tableNameDecapitalize}}.get{{column.name|toCamelCase }}().toUpperCase() +"%");
			}
			where.append(" AND t1.{{column.name}} IS NOT NULL");{% else%} 
			where.append(" AND t1.{{column.name}} = ?");
			params.add({{tableNameDecapitalize}}.get{{column.name|toCamelCase }}());{% endif%}
			}{% endfor %}
		{%if dao is not none %}
		{% for column in padreOriginalCol %}
		if ({{tableNameDecapitalize}}  != null  && {{tableNameDecapitalize}}.get{{entidadPadre}}() != null && {{tableNameDecapitalize}}.get{{entidadPadre}}().get{{column.name|toCamelCase}}()!=null) {
			{% if column.DATO_TYPE == 'String' %}
			where.append(" AND UPPER(t2.{{column.name}}) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add({{tableNameDecapitalize}}.get{{entidadPadre}}().get{{column.name|toCamelCase }}().toUpperCase() +"%");
			}else{
				params.add("%"+{{tableNameDecapitalize}}.get{{entidadPadre}}().get{{column.name|toCamelCase }}().toUpperCase() +"%");
			}
			where.append(" AND t2.{{column.name}} IS NOT NULL");{% else%} 
			where.append(" AND t2.{{column.name}} = ?");
			params.add({{tableNameDecapitalize}}.get{{entidadPadre}}().get{{column.name|toCamelCase }}());
			{% endif%}
		}	
		{% endfor %}
		{% endif %}

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);

		return mapWhere;
	}

		/**
	 * Returns a map with the needed value to create the conditions to filter by  
	 * the {{tableName}} entity 
	 * 
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 *            Bean with the criteria values to filter by.
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generación de código de UDA
	private Map<String, Object> getWhereMap ({{tableName}} {{tableNameDecapitalize}}){

		StringBuffer where = new StringBuffer({{tableName}}DaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		{% for column in allColumns %}
		if ({{tableNameDecapitalize}}  != null  && {{tableNameDecapitalize}}.get{{column.name|toCamelCase }}() != null ) {
			where.append(" AND t1.{{column.name}} = ?");
			params.add({{tableNameDecapitalize}}.get{{column.name|toCamelCase }}());
		}	
		{% endfor %}

		{%if dao is not none %}
		{% for column in padreOriginalCol %}
		if ({{tableNameDecapitalize}}  != null  && {{tableNameDecapitalize}}.get{{entidadPadre}}() != null && {{tableNameDecapitalize}}.get{{entidadPadre}}().get{{column.name|toCamelCase}}()!=null ) {
			where.append(" AND t2.{{column.name}} = ?");
			params.add({{tableNameDecapitalize}}.get{{entidadPadre}}().get{{column.name|toCamelCase }}());
		}	
		{% endfor %}
		{% endif %}

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);

		return mapWhere;
	}

	/**
	 * Finds a List of rows in the {{tableName}} table.
	 * 
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @return List 
	 */
	 @Transactional (readOnly = true)
	 public List<{{tableName}}> findAll({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto) {
		StringBuilder query = new StringBuilder("SELECT {% for column in columnasDaos %} t1.{{ column.name }} {{ column.name }}{% if loop.index != columnasDaos|length %},{% endif%}{% endfor %} {% if dao is not none %}, {% for column in padreOriginalCol %} t2.{{ column.name }} {{ column.name }}{% if loop.index != padreOriginalCol|length %},{% endif%}{% endfor %} {% endif %}"); 
		query.append("FROM {{tableNameDecapitalize}} t1 {% if dao is not none %} , {{entidadPadre.upper()}} t2 {% endif %}");
		
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap({{tableNameDecapitalize}}); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 {% if dao is not none %} % dao AND t1.{{tableFKey}}=t2.{{primaryKPadre}}(+){% endif %}");
		where.append(mapaWhere.get("query"));
		query.append(where);
		
		List<?> params = (List<?>) mapaWhere.get("params");

		if (tableRequestDto != null) {
			query = TableManager.getPaginationQuery(tableRequestDto, query, {{tableName}}DaoImpl.ORDER_BY_WHITE_LIST);
		}
		 
		return (List<{{tableName}}>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}

	    /**
     * Counts rows in the {{tableName}} table.
     * 
     * @param {{tableNameDecapitalize}} {{tableName}}
     * @return Long
     */
	@Override 
    @Transactional (readOnly = true)
    public Long findAllCount({{tableName}} {{tableNameDecapitalize}}) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM {{tableName}} t1 {% if dao is not none %} , {{entidadPadre.upper()}} t2 {% endif %}");
		
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap({{tableNameDecapitalize}}); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 {% if dao is not none %} % dao AND t1.{{tableFKey}}=t2.{{primaryKPadre}}(+){% endif %}");
		where.append(mapaWhere.get("query"));
		query.append(where);		
		
		List<?> params = (List<?>) mapaWhere.get("params");
		
		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}

		/**
	 * Finds rows in the {{tableName}} table using like.
     * 
     * @param {{tableNameDecapitalize}} {{tableName}}
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List 
     */
	@Override 
	@Transactional (readOnly = true)
    public List<{{tableName}}> findAllLike({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT {% for column in columnasDaos %} t1.{{ column.name }} {{ column.name }}{% if loop.index != columnasDaos|length %},{% endif%}{% endfor %} {% if dao is not none %}, {% for column in padreOriginalCol %} t2.{{ column.name }} {{ column.name }}{% if loop.index != padreOriginalCol|length %},{% endif%}{% endfor %} {% endif %} "); 
        query.append("FROM {{tableName}} t1 {% if dao is not none %} , {{entidadPadre.upper()}} t2 {% endif %} ");
      	
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap({{tableNameDecapitalize}},startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 {% if dao is not none %} % dao AND t1.{{tableFKey}}=t2.{{primaryKPadre}}(+){% endif %}");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		if (tableRequestDto != null) {
			query = TableManager.getPaginationQuery(tableRequestDto, query, {{tableName}}DaoImpl.ORDER_BY_WHITE_LIST);
		}
		
		return (List<{{tableName}}>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}

		/**
	 * Counts rows in the {{tableName}} table using like.
     * 
     * @param {{tableNameDecapitalize}} {{tableName}}
     * @param startsWith Boolean
     * @return Long 
     */
	@Override 
	@Transactional (readOnly = true)
    public Long findAllLikeCount({{tableName}} {{tableNameDecapitalize}}, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM {{tableName}} t1 {% if dao is not none %} , {{entidadPadre.upper()}} t2 {% endif %}");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap({{tableNameDecapitalize}},startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 {% if dao is not none %} % dao AND t1.{{tableFKey}}=t2.{{primaryKPadre}}(+){% endif %}");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}

	@Override
	public List<TableRowDto<{{tableName}}>> reorderSelection({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto,
			Boolean startsWith) {
		
		// SELECT
		StringBuilder sbSQL = new StringBuilder("SELECT {% for column in columnasDaos %} t1.{{ column.name }} {{ column.name }}{% if loop.index != columnasDaos|length %},{% endif%}{% endfor %} {% if dao is not none %}, {% for column in padreOriginalCol %} t2.{{ column.name }} {{ column.name }}{% if loop.index != padreOriginalCol|length %},{% endif%}{% endfor %} {% endif %} ");
		
		// FROM
        sbSQL.append("FROM {{tableName}} t1 {% if dao is not none %} , {{entidadPadre.upper()}} t2 {% endif %} ");
        
		// FILTRADO 
		Map<String, ?> mapaWhere = this.getWhereLikeMap({{tableNameDecapitalize}}, startsWith);
		// Claula where  de filtrado
		sbSQL.append(" WHERE 1=1 {% if dao is not none %} % dao AND t1.{{tableFKey}}=t2.{{primaryKPadre}}(+){% endif %}").append(mapaWhere.get("query"));
		// Parámetros de filtrado
		@SuppressWarnings("unchecked")
		List<Object> filterParamList = (List<Object>) mapaWhere.get("params");		
		
		// SQL para la reordenación
		StringBuilder sbReorderSelectionSQL = TableManager.getReorderQuery(sbSQL, tableRequestDto, {{tableName}}.class, filterParamList, {% for column in listPks %}"{{ column.name }}"{% if loop.index != listPks|length %},{% endif%} {% endfor %});
		
		return this.jdbcTemplate.query(sbReorderSelectionSQL.toString(), new RowNumResultSetExtractor<{{tableName}}>(this.rwMapPK, tableRequestDto), filterParamList.toArray());
	}
	
	@Override
	public List<TableRowDto<{{tableName}}>> search({{tableName}} filterParams, {{tableName}} searchParams, TableRequestDto tableRequestDto, Boolean startsWith) {
		
		// SELECT 
		StringBuilder sbSQL = new StringBuilder("SELECT {% for column in columnasDaos %} t1.{{ column.name }} {{ column.name }}{% if loop.index != columnasDaos|length %},{% endif%}{% endfor %} {% if dao is not none %}, {% for column in padreOriginalCol %} t2.{{ column.name }} {{ column.name }}{% if loop.index != padreOriginalCol|length %},{% endif%}{% endfor %} {% endif %} ");
		
		// FROM
		sbSQL.append("FROM {{tableName}} t1 {% if dao is not none %} , {{entidadPadre.upper()}} t2 {% endif %} ");
      	
		//TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add("t1");
		{%if dao is not none%}
		from_alias.add("t2");
		{%endif%}
		
		// FILTRADO
		// Mapa de filtrado
		Map<String, ?> mapaWhereFilter = this.getWhereLikeMap(filterParams, startsWith); 
		// Claula where  de filtrado
		sbSQL.append(" WHERE 1=1 {% if dao is not none %} % dao AND t1.{{tableFKey}}=t2.{{primaryKPadre}}(+){% endif %}").append(mapaWhereFilter.get("query"));
		// Parámetros de filtrado
		@SuppressWarnings("unchecked")
		List<Object> filterParamList = (List<Object>) mapaWhereFilter.get("params");
		
		// BUSQUEDA
		Map<String, ?> mapaWhereSearch = this.getWhereLikeMap(searchParams, startsWith);
		// Claula where  de búsqueda
		String searchSQL = ((StringBuffer) mapaWhereSearch.get("query")).toString();
		// Parámetros de búsqueda
		@SuppressWarnings("unchecked")
		List<Object> searchParamList = (List<Object>) mapaWhereSearch.get("params");
		

		// SQL para la busqueda
		StringBuilder sbReorderSelectionSQL = TableManager.getSearchQuery(sbSQL, tableRequestDto, {{tableName}}.class, filterParamList, searchSQL, searchParamList, from_alias, {% for column in listPks %}"{{ column.name }}"{% if loop.index != listPks|length %},{% endif%} {% endfor %});
				
		return this.jdbcTemplate.query(sbReorderSelectionSQL.toString(), new RowNumResultSetExtractor<{{tableName}}>(this.rwMapPK, tableRequestDto), filterParamList.toArray());
	}

	
	/*
	 * OPERACIONES RUP_TABLE
	 */
	
	@Override
	public void removeMultiple(TableRequestDto tableRequestDto) {
		StringBuilder sbRemoveMultipleSQL = TableManager.getRemoveMultipleQuery(tableRequestDto, {{tableName}}.class, "{{tableName}}", new String[]{{'{'}}{% for column in listPks %}"{{ column.name }}"{% if loop.index != listPks|length %},{% endif%} {% endfor %}{{'}'}});
		
		List<String> params = tableRequestDto.getMultiselection().getSelectedIds();
		
		this.jdbcTemplate.update(sbRemoveMultipleSQL.toString(), params.toArray());
	}
}