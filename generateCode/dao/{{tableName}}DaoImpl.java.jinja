/*
* Copyright 2024 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package {{packageName}}.dao;

import com.ejie.x38.dao.RowNumResultSetExtractor;
import com.ejie.x38.dto.TableManager;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.sql.DataSource;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import com.ejie.{{project_name}}.model.{{tableName}};

/**
 * {{tableName}}DaoImpl generated by UDA", {{date}}.
 * @author UDA
 */

@Transactional
public class {{tableName}}DaoImpl implements {{tableName}}Dao {

	/**
	 * StringBuilder initilization value
	 */
	public static final int STRING_BUILDER_INIT = 4096;

    protected static final String[] ORDER_BY_WHITE_LIST = new String[] { {% for column in columnsDates %}"{{ column.name }}"{% if loop.index != columnsDates|length %},{% endif%} {% endfor %}};

    private JdbcTemplate jdbcTemplate;

	/*
	 * ROW_MAPPERS
	 */
	private RowMapper<{{tableName}}> rwMap = new RowMapper<{{tableName}}>() {
		public {{tableName}} mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			return new {{tableName}}(
				{% for column in columnsDates %}resultSet.get{{ column.DATO_TYPE }}("{{ column.name }}"){% if loop.index != columnsDates|length %},{% endif%} {% endfor %}
			);
		}
	};

	private RowMapper<{{tableName}}> rwMapPK = new RowMapper<{{tableName}}>() {
		public {{tableName}} mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			return new {{tableName}}(
				{% for column in listPks %}resultSet.get{{ column.DATO_TYPE }}("{{ column.name }}"){% if loop.index != listPks|length %},{% endif%} {% endfor %}
           	);
    	}
  	};

	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     *
     * @return
     */
    @Autowired
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

	/*
	 * OPERACIONES CRUD
	 */

    /**
     * Inserts a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
	public {{tableName}} add({{tableName}} {{tableNameDecapitalize}}) {

    	String query = "INSERT INTO {{tableNameOriginal.upper()}} ({% for column in columnsDates %}{{ column.name }}{% if loop.index != columnsDates|length %},{% endif%} {% endfor %}) VALUES ({% for column in columnsDates %}?{% if loop.index != columnsDates|length %},{% endif%} {% endfor %})";

		this.jdbcTemplate.update(query, {% for column in columnsDates %} {{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}() {% if loop.index != columnsDates|length %},{% endif%} {% endfor %});
		return {{tableNameDecapitalize}};
	}

    /**
     * Updates a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
    public {{tableName}} update({{tableName}} {{tableNameDecapitalize}}) {

		String query = "UPDATE {{tableNameOriginal.upper()}} ({% for column in columnsDates %}{% if column.primaryKey != 'P' %} {{ column.name }}=?{% if loop.index != columnsDates|length %},{% endif%}{% endif%}{% endfor %}) WHERE {% for column in listPks %}{{ column.name }}=?{% if loop.index != listPks|length %},{% endif%} {% endfor %}";
		this.jdbcTemplate.update(query, {% for column in columnsDates %} {% if column.primaryKey != 'P' %}{{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}() ,{% endif%} {% endfor %}{% for column in listPks %} {{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}() {% if loop.index != listPks|length %},{% endif%} {% endfor %});

		return {{tableNameDecapitalize}};
	}

    /**
     * Finds a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     *
     * @return {{tableName}}
     */
    @Transactional (readOnly = true)
    public {{tableName}} find({{tableName}} {{tableNameDecapitalize}}) {

		String query = "SELECT {% for column in columnsDates %} t1.{{ column.name }} {{ column.name }}{% if loop.index != columnsDates|length %},{% endif%}{% endfor %} WHERE {% for column in listPks %}{{ column.name }}=?{% if loop.index != listPks|length %},{% endif%} {% endfor %} FROM {{tableNameOriginal.upper()}} t1 WHERE {% for column in listPks %}t1.{{ column.name }}=?{% if loop.index != listPks|length %},{% endif%} {% endfor %}";

		List<{{tableName}}> {{tableNameDecapitalize}}List = this.jdbcTemplate.query(query, this.rwMap, {% for column in listPks %}{{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}(){% if loop.index != listPks|length %},{% endif%} {% endfor %});
		return DataAccessUtils.uniqueResult({{tableNameDecapitalize}}List);
    }

    /**
     * Removes a single row in the {{tableName}} table.
     *
     * @param {{tableNameDecapitalize}} {{tableName}}
     */
    public void remove({{tableName}} {{tableNameDecapitalize}}) {
	
		String query = "DELETE FROM {{tableNameOriginal.upper()}} WHERE {% for column in listPks %}t1.{{ column.name }}=?{% if loop.index != listPks|length %},{% endif%} {% endfor %}";
		this.jdbcTemplate.update(query, {% for column in listPks %}{{tableNameDecapitalize}}.get{{ column.name|toCamelCase}}(){% if loop.index != listPks|length %},{% endif%} {% endfor %});
    }
    
   	public List<{{tableName}}> getMultiple({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith) {

    	// SELECT
    	StringBuilder query = new StringBuilder("SELECT {% for column in columnsDates %} t1.{{ column.name }} {{ column.name }}{% if loop.index != columnsDates|length %},{% endif%}{% endfor %}");
    	// FROM
    	query.append("FROM {{tableNameOriginal.upper()}} t1 ");
    	// WHERE clause & Params
    	Map<String, Object> mapaWhere = this.getWhereLikeMap(filter{{tableName}}, startsWith);
    	StringBuilder where = new StringBuilder(" WHERE 1=1 ");
    	where.append(mapaWhere.get("query"));
    	query.append(where);
    	
    	@SuppressWarnings("unchecked")
    	List<Object> params = (List<Object>) mapaWhere.get("params");
    	
    	StringBuilder sbMultipleSQL = query.append(TableManager.getSelectMultipleQuery(tableRequestDto, {{tableName}}.class, params, {{tableName}}DaoImpl.ORDER_BY_WHITE_LIST, "{% for column in listPks %}{{ column.name }}{% if loop.index != listPks|length %} AND {% endif%}{% endfor %}"));
    	
    	return this.jdbcTemplate.query(sbMultipleSQL.toString(), this.rwMap, params.toArray());
    }
}