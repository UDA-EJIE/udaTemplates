/*
* Copyright 2024 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package {{packageName}}.service;

import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;
import com.ejie.x38.util.DateTimeManager;
import com.lowagie.text.Document;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.odftoolkit.odfdom.doc.OdfSpreadsheetDocument;
import org.odftoolkit.odfdom.doc.table.OdfTable;
import org.odftoolkit.odfdom.doc.table.OdfTableRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.ejie.{{project_name}}.model.{{tableName}};
import com.ejie.{{project_name}}.dao.{{tableName}}Dao;

/**
 * {{tableName}}ServiceImpl generated by UDA", {{date}}.
 * @author UDA
 */

@Service(value = "{{tableNameDecapitalize}}Service")
public class {{tableName}}ServiceImpl implements {{tableName}}Service {

	@Autowired
	private {{tableName}}Dao {{tableNameDecapitalize}}Dao;

	/**
	 * Inserts a single row in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 *
	 * @return {{tableName}}
	 */
	@Transactional(rollbackFor = Throwable.class)
	public {{tableName}} add({{tableName}} {{tableNameDecapitalize}}) {
		return this.{{tableNameDecapitalize}}Dao.add({{tableNameDecapitalize}});
	}

	/**
	 * Updates a single row in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 *
	 * @return {{tableName}}
	 */
	@Transactional(rollbackFor = Throwable.class)
	public {{tableName}} update({{tableName}} {{tableNameDecapitalize}}) {
		return this.{{tableNameDecapitalize}}Dao.update({{tableNameDecapitalize}});
	 }

	/**
	 * Finds a single row in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 *
	 * @return {{tableName}}
	 */
	public {{tableName}} find({{tableName}} {{tableNameDecapitalize}}) {
		return ({{tableName}}) this.{{tableNameDecapitalize}}Dao.find({{tableNameDecapitalize}});
	}
	
	/**
	 * Deletes a single row in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove({{tableName}} {{tableNameDecapitalize}}) {
		this.{{tableNameDecapitalize}}Dao.remove({{tableNameDecapitalize}});
	}

	/**
	 * Finds a list of rows in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 *
	 * @return List<{{tableName}}>
	 */
	public List<{{tableName}}> findAll({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto) {
		return (List<{{tableName}}>) this.{{tableNameDecapitalize}}Dao.findAll({{tableNameDecapitalize}}, tableRequestDto);
	}
	
	/**
	 * Finds a List of rows containing the CP field in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 * @param startsWith boolean
	 *
	 * @return List<{{tableName}}>
	 */
	public List<{{tableName}}> findAllIds({{tableName}} {{tableNameDecapitalize}}, boolean startsWith) {
		return this.{{tableNameDecapitalize}}Dao.findAllIds({{tableNameDecapitalize}}, startsWith);
	}
    
	/**
	 * Finds rows in the {{tableName}} table using like.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     *	 
	 * @return List<{{tableName}}>
	 */
	public List<{{tableName}}> findAllLike({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto, Boolean startsWith) {
		return (List<{{tableName}}>) this.{{tableNameDecapitalize}}Dao.findAllLike({{tableNameDecapitalize}}, tableRequestDto, startsWith);
	}

	/*
	 * OPERACIONES RUP_TABLE
	 */
	 
	/**
	 * Removes rows from the {{tableName}} table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith) {
		this.{{tableNameDecapitalize}}Dao.removeMultiple(filter{{tableName}}, tableRequestDto, startsWith);
	}
        
	/**
	 * Filter method in the {{tableName}} table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 *
	 * @return TableResponseDto<{{tableName}}>
	 */	
	public TableResponseDto<{{tableName}}> filter({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith) {
		List<{{tableName}}> lista{{tableName}} = this.{{tableNameDecapitalize}}Dao.findAllLike(filter{{tableName}}, tableRequestDto, false);
		Long recordNum = this.{{tableNameDecapitalize}}Dao.findAllLikeCount(filter{{tableName}} != null ? filter{{tableName}} : new {{tableName}}(), false);
		TableResponseDto<{{tableName}}> tableResponseDto = new TableResponseDto<{{tableName}}>(tableRequestDto, recordNum, lista{{tableName}});
		
		if (tableRequestDto.getMultiselection().getSelectedIds() != null && !tableRequestDto.getMultiselection().getSelectedIds().isEmpty()) {
			List<TableRowDto<{{tableName}}>> reorderSelection = this.{{tableNameDecapitalize}}Dao.reorderSelection(filter{{tableName}}, tableRequestDto, startsWith);
			tableResponseDto.setReorderedSelection(reorderSelection);
			tableResponseDto.addAdditionalParam("reorderedSelection", reorderSelection);
			tableResponseDto.addAdditionalParam("selectedAll", tableRequestDto.getMultiselection().getSelectedAll());
		}
		if (tableRequestDto.getSeeker().getSelectedIds() != null) {
			tableRequestDto.setMultiselection(tableRequestDto.getSeeker());
			List<TableRowDto<{{tableName}}>> reorderSeeker = this.{{tableNameDecapitalize}}Dao.reorderSelection(filter{{tableName}}, tableRequestDto, startsWith);
			tableResponseDto.setReorderedSeeker(reorderSeeker);
			tableResponseDto.addAdditionalParam("reorderedSeeker", reorderSeeker);
		}
		return tableResponseDto;   
	}
    /**
	 * Searches rows in the {{tableName}} table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param search{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 *
	 * @return List<TableRowDto<{{tableName}}>>
	 */	
    public List<TableRowDto<{{tableName}}>> search({{tableName}} filter{{tableName}}, {{tableName}} search{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith) {
		return this.{{tableNameDecapitalize}}Dao.search(filter{{tableName}}, search{{tableName}}, tableRequestDto, startsWith);
	}
    
    /**
	 * Reorder the selection made in {{tableName}} table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 *
	 * @return Object
	 */	
    public Object reorderSelection({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith) {
		return this.{{tableNameDecapitalize}}Dao.reorderSelection(filter{{tableName}}, tableRequestDto, startsWith);
	}
    
  	@Transactional(rollbackFor = Throwable.class)
	public List<{{tableName}}> getMultiple({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto,  Boolean startsWith) {
		return this.{{tableNameDecapitalize}}Dao.getMultiple(filter{{tableName}}, tableRequestDto, startsWith);
	}
	
	/**
	 * Devuelve un fichero en el formato deseado que contiene los datos exportados de la tabla.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@Override
	public void generateReport({{tableName}} filter{{tableName}}, String[] columns, String[] columnsName, String fileName, String sheetTitle, ArrayList<?> reportsParams,
			TableRequestDto tableRequestDto, HttpServletRequest request, HttpServletResponse response) {
		// Accede a la DB para recuperar datos
		List<{{tableName}}> filteredData = getDataForReports(filter{{tableName}}, tableRequestDto);
		String extension = null;

		// Comprobar si las siguientes variables estan vacias, en caso de estarlo se las
		// asigna un valor generico
		fileName = (fileName != null && !fileName.isEmpty()) ? fileName : "report";
		sheetTitle = (sheetTitle != null && !sheetTitle.isEmpty()) ? sheetTitle : {{tableName}}.class.getSimpleName();

		// Obtener el formato de fecha especifico del locale
		SimpleDateFormat formatter = DateTimeManager.getDateTimeFormat(request.getLocale());

		// Cuando no se definen columnas porque se quieren obtener todas
		if (columns == null) {
			Field[] fields = {{tableName}}.class.getDeclaredFields();
			ArrayList<String> tempColumns = new ArrayList<String>();

			for (int i = 0; i < fields.length; i++) {
				try {
					String methodName = fields[i].getName();
					methodName = methodName.substring(0, 1).toUpperCase() + methodName.substring(1);
					{{tableName}}.class.getMethod("get" + methodName);
					tempColumns.add(fields[i].getName());
				} catch (NoSuchMethodException e) {
					e.printStackTrace();
				}

			}
			columns = tempColumns.toArray(new String[0]);
		}
		
		// Si no se definen los nombres de las columnas se dejan las definidas por defecto
        if (columnsName == null) {
        	columnsName = columns;
        }

		String servletPath = request.getServletPath();
		String reportType = null;
		if (servletPath.contains("/") && (servletPath.lastIndexOf("/") + 1 != servletPath.length())) {
			reportType = servletPath.substring(servletPath.lastIndexOf("/") + 1, servletPath.length());
		} else {
			reportType = servletPath.substring(0, servletPath.length());
		}

		if (reportType.equals("xlsReport")) {
			extension = ".xls";
			generateExcelReport(filteredData, columns,columnsName, fileName, sheetTitle, extension, formatter, response);
		} else if (reportType.equals("xlsxReport")) {
			extension = ".xlsx";
			generateExcelReport(filteredData, columns,columnsName, fileName, sheetTitle, extension, formatter, response);
		} else if (reportType.equals("pdfReport")) {
			extension = ".pdf";
			generatePDFReport(filteredData, columns,columnsName, fileName, response);
		} else if (reportType.equals("odsReport")) {
			extension = ".ods";
			generateODSReport(filteredData, columns,columnsName, fileName, sheetTitle, response);
		} else if (reportType.equals("csvReport")) {
			extension = ".csv";
			// Obtener idioma
			String language = request.getLocale().getLanguage();
			generateCSVReport(filteredData, columns,columnsName, fileName, sheetTitle, language, response);
		}

	}
	
	/**
	 * Devuelve un fichero excel que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<{{tableName}}>
	 * @param columns      String[]
	 * @param fileName     String
	 * @param sheetTitle   String
	 * @param extension    String
	 * @param formatter    SimpleDateFormat
	 * @param response     HttpServletResponse
	 */
	private void generateExcelReport(List<{{tableName}}> filteredData, String[] columns,String[] columnsName, String fileName, String sheetTitle,
			String extension, SimpleDateFormat formatter, HttpServletResponse response) {
		try {
			// Creacion del Excel
			Workbook workbook = null;
			if (extension == ".xlsx") {
				workbook = new XSSFWorkbook();
				response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			} else {
				workbook = new HSSFWorkbook();
				response.setContentType("application/vnd.ms-excel");
			}

			response.setHeader("Content-Disposition", "attachment; filename=" + fileName + extension + "");

			// Creacion de una hoja y asignacion de su nombre
			Sheet sheet = workbook.createSheet(sheetTitle);

			// Se crea una fuente para estilizar las cabeceras
			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setFontHeightInPoints((short) 12);

			// Se crea un CellStyle con la fuente
			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
			headerCellStyle.setFont(headerFont);

			// Inicializar contador de filas
			int rowNumber = 0;

			// Se crea la fila para insertar los titulos de las columnas
			Row row = sheet.createRow(rowNumber++);

			// Añadir titulos
			for (int i = 0; i < columnsName.length; i++) {
				Cell cell = row.createCell(i);
				cell.setCellValue(columnsName[i]);
				cell.setCellStyle(headerCellStyle);
			}

			// CreationHelper ayudara a mantener la compatibilidad del DataFormat tanto si
			// se crea un .xls como un .xlsx
			CreationHelper createHelper = workbook.getCreationHelper();

			// Se crea un CellStyle para añadir el formateador de fechas
			CellStyle dateCellStyle = workbook.createCellStyle();
			dateCellStyle.setDataFormat(createHelper.createDataFormat().getFormat(formatter.toPattern()));

			// Añadir datos
			for ({{tableName}} row{{tableName}} : filteredData) {
				int cellNumber = 0;
				row = sheet.createRow(rowNumber++);

				// Se iteran las columnas y se insertan los datos respetando el orden que tenian
				// las columnas en la tabla
				for (String column : columns) {
					Cell cell{{tableName}} = row.createCell(cellNumber++);
					cell{{tableName}}.setCellValue(getCellValue(column, row{{tableName}}));
				}
			}

			// Se adapta el ancho de las columnas al contenido
			for (int i = 0; i < columns.length; i++) {
				sheet.autoSizeColumn(i);
			}

			// Se añade el fichero excel al response
			workbook.write(response.getOutputStream());
			workbook.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Devuelve un fichero pdf que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<{{tableName}}>
	 * @param columns      String[]
	 * @param fileName     String
	 * @param response     HttpServletResponse
	 */
	private void generatePDFReport(List<{{tableName}}> filteredData, String[] columns, String[] columnsName, String fileName,
			HttpServletResponse response) {
		try {
			// Se añade el fichero excel al response y se añade el contenido
			response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".pdf");
			response.setContentType("application/pdf");

			Document document = new Document();
			// Se añade el fichero pdf al response
			PdfWriter.getInstance(document, response.getOutputStream());

			document.open();

			PdfPTable table = new PdfPTable(columns.length);

			for (String column : columnsName) {
				PdfPCell header = new PdfPCell();
				header.setBorderWidth(2);
				header.setPhrase(new Phrase(column));
				table.addCell(header);
			}

			// Añadir datos
			for ({{tableName}} row{{tableName}} : filteredData) {
				// Se iteran las columnas y se insertan los datos respetando el orden que tenian
				// las columnas en la tabla
				for (String column : columns) {
					table.addCell(getCellValue(column, row{{tableName}}));
				}
			}

			document.add(table);
			document.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Devuelve un fichero ods que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<{{tableName}}>
	 * @param columns      String[]
	 * @param fileName     String
	 * @param sheetTitle   String
	 * @param response     HttpServletResponse
	 */
	private void generateODSReport(List<{{tableName}}> filteredData, String[] columns, String[] columnsName, String fileName, String sheetTitle,
			HttpServletResponse response) {
		try {
			// Se añade el fichero ods al response y se añade el contenido
			response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".ods");
			response.setContentType("application/vnd.oasis.opendocument.spreadsheet");

			OdfSpreadsheetDocument ods = OdfSpreadsheetDocument.newSpreadsheetDocument();
			ods.getOrCreateDocumentStyles();

			// Hay que eliminar la hoja que se genera por defecto
			ods.getTableByName("Sheet1").remove();

			// Hoja nueva
			OdfTable table = OdfTable.newTable(ods, filteredData.size() + 1, columns.length);
			table.setTableName(sheetTitle);

			// Inicializar contador de filas
			int rowNumber = 0;

			// Cabeceras
			OdfTableRow row = table.getRowByIndex(rowNumber++);
			for (int i = 0; i < columnsName.length; i++) {
				row.getCellByIndex(i).setStringValue(columnsName[i]);
			}

			// Añadir datos
			for ({{tableName}} row{{tableName}} : filteredData) {
				row = table.getRowByIndex(rowNumber++);
				int cellNumber = 0;

				// Se iteran las columnas y se insertan los datos respetando el orden que tenian
				// las columnas en la tabla
				for (String column : columns) {
					row.getCellByIndex(cellNumber++).setStringValue(getCellValue(column, row{{tableName}}));
				}
			}

			// Se añade el fichero ods al response
			ods.save(response.getOutputStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Devuelve un fichero csv que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<{{tableName}}>
	 * @param columns      String[]
	 * @param fileName     String
	 * @param sheetTitle   String
	 * @param language     String
	 * @param response     HttpServletResponse
	 */
	private void generateCSVReport(List<{{tableName}}> filteredData, String[] columns, String[] columnsName, String fileName, String sheetTitle,
			String language, HttpServletResponse response) {
		try {
			// Se añade el fichero excel al response y se añade el contenido
			response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".csv");
			response.setContentType("text/csv");

			// Separador de campos dependiendo del idioma
			String separator = ";";
			if (language.equals("en")) {
				separator = ",";
			}

			// Se añade el fichero csv al response
			OutputStream out = response.getOutputStream();
			// Añadir titulos
			boolean addTitles = true;

			// Añadir datos
			for ({{tableName}} row{{tableName}} : filteredData) {
				int cellNumber = 1;
				StringBuilder columnsTitles = new StringBuilder();
				StringBuilder row = new StringBuilder();

				// Se iteran las columnas y se insertan los datos respetando el orden que tenian
				// las columnas en la tabla
				for (String column : columns) {
					String cellValue = getCellValue(column, row{{tableName}});

					if (cellNumber < columns.length) {
						if (addTitles) {
							columnsTitles.append("\"");
							columnsTitles.append(column);
							columnsTitles.append("\"");
							columnsTitles.append(separator);
						}
						row.append("\"");
						row.append(cellValue);
						row.append("\"");
						row.append(separator);
						cellNumber++;
					} else {
						if (addTitles) {
							columnsTitles.append("\"");
							columnsTitles.append(column);
							columnsTitles.append("\"\n");
						}
						row.append("\"");
						row.append(cellValue);
						row.append("\"\n");
					}
				}

				if (addTitles) {
					out.write(columnsTitles.toString().getBytes());
					addTitles = false;
				}
				out.write(row.toString().getBytes());
			}
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Devuelve los datos recuperados de la DB.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 *
	 * @return List<{{tableName}}>
	 */
	public List<{{tableName}}> getDataForReports({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto) {
		if (tableRequestDto.getMultiselection().getSelectedAll()
				&& tableRequestDto.getMultiselection().getSelectedIds().isEmpty()) {
			if (filter{{tableName}} != null) {
				return this.{{tableNameDecapitalize}}Dao.findAllLike(filter{{tableName}}, tableRequestDto, false);
			} else {
				return this.{{tableNameDecapitalize}}Dao.findAll(new {{tableName}}(), null);
			}
		} else {
			return this.{{tableNameDecapitalize}}Dao.getMultiple(filter{{tableName}}, tableRequestDto, false);
		}
	}

	/**
	 * Obtiene los valores de las celdas.
	 *
	 * @param column String
	 * @param row{{tableName}} {{tableName}}
	 *
	 * @return String
	 */
	private String getCellValue(String column, {{tableName}} row{{tableName}}) {
		String cellValue = "";
		try {
			cellValue = BeanUtils.getProperty(row{{tableName}}, column) != null ? BeanUtils.getProperty(row{{tableName}}, column) : "";
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		}

		return cellValue;
	}
}