/*
* Copyright 2024 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package {{packageName}}.service;

import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ejie.{{project_name}}.model.{{tableName}};

/**
 * {{tableName}}Service generated by UDA", {{date}}.
 * @author UDA
 */

public interface {{tableName}}Service {

	/**
	 * Inserts a single row in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 *
	 * @return {{tableName}}
	 */
    {{tableName}} add({{tableName}} {{tableNameDecapitalize}});

	/**
	 * Updates a single row in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 *
	 * @return {{tableName}}
	 */
	{{tableName}} update({{tableName}} {{tableNameDecapitalize}});

	/**
	 * Finds a single row in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 *
	 * @return {{tableName}}
	 */
	{{tableName}} find({{tableName}} {{tableNameDecapitalize}});

	/**
	 * Deletes a single row in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 */
	void remove({{tableName}} {{tableNameDecapitalize}});

	/**
	 * Finds a list of rows in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 *
	 * @return List<{{tableName}}>
	 */
	List<{{tableName}}> findAll({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto);

	/**
	 * Finds a List of rows containing the CP field in the {{tableName}} table.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 * @param startsWith boolean
	 *
	 * @return List<{{tableName}}>
	 */
	List<{{tableName}}> findAllIds({{tableName}} {{tableNameDecapitalize}}, boolean startsWith);

	/**
	 * Finds rows in the {{tableName}} table using like.
	 *
	 * @param {{tableNameDecapitalize}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * 
	 * @return List<{{tableName}}>
	 */
	List<{{tableName}}> findAllLike({{tableName}} {{tableNameDecapitalize}}, TableRequestDto tableRequestDto, Boolean startsWith);

	/*
	 * OPERACIONES RUP_TABLE
	 */

	/**
	 * Removes rows from the {{tableName}} table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 */	
	void removeMultiple({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith);
    
	/**
	 * Filter method in the {{tableName}} table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 *
	 * @return TableResponseDto<{{tableName}}>
	 */	
	TableResponseDto<{{tableName}}> filter({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto,  Boolean startsWith);
    
    /**
	 * Searches rows in the {{tableName}} table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param search{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 *
	 * @return List<TableRowDto<{{tableName}}>>
	 */	
    List<TableRowDto<{{tableName}}>> search({{tableName}} filter{{tableName}}, {{tableName}} search{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith);
    
    /**
	 * Reorder the selection made in {{tableName}} table.
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 *
	 * @return Object
	 */	
    Object reorderSelection({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto, Boolean startsWith);
    
     
    /**
    * Exporta Datos al clipBoard
    *
    * @param filter{{tableName}} {{tableName}}
	* @param tableRequestDto TableRequestDto
    */
    List<{{tableName}}> getDataForReports({{tableName}} filter{{tableName}}, TableRequestDto tableRequestDto);
    
    /**
	 * Exporta Datos en su formato
	 *
	 * @param filter{{tableName}} {{tableName}}
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	void generateReport({{tableName}} filter{{tableName}}, String[] columns, String[] columnsName, String fileName, String sheetTitle,
			ArrayList<?> reportsParams, TableRequestDto tableRequestDto, HttpServletRequest request, 
			HttpServletResponse response);
     
}